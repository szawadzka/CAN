
CAN_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003958  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b58  08003b58  00013b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00013bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00013bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08003c44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003c44  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a511  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001915  00000000  00000000  0002a5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002710d  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000951f  00000000  00000000  00053f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3528  00000000  00000000  0005d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001509e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b0  00000000  00000000  00150a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003b40 	.word	0x08003b40

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003b40 	.word	0x08003b40

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb41 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f81e 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f8fe 	bl	80007f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f8cc 	bl	8000794 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80005fc:	f000 f892 	bl	8000724 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Tx();
 8000600:	f000 f984 	bl	800090c <CAN1_Tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(button==1){
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <main+0x40>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b01      	cmp	r3, #1
 800060c:	d1fa      	bne.n	8000604 <main+0x1c>
		 HAL_Delay(500);
 800060e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000612:	f000 fb8b 	bl	8000d2c <HAL_Delay>
		 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <main+0x44>)
 800061c:	f001 f8a6 	bl	800176c <HAL_GPIO_WritePin>
		 button=0;
 8000620:	4b01      	ldr	r3, [pc, #4]	; (8000628 <main+0x40>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	 if(button==1){
 8000626:	e7ed      	b.n	8000604 <main+0x1c>
 8000628:	2000008c 	.word	0x2000008c
 800062c:	40020400 	.word	0x40020400

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b0b8      	sub	sp, #224	; 0xe0
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fe48 	bl	80032d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2290      	movs	r2, #144	; 0x90
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f002 fe39 	bl	80032d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b2e      	ldr	r3, [pc, #184]	; (800071c <SystemClock_Config+0xec>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a2d      	ldr	r2, [pc, #180]	; (800071c <SystemClock_Config+0xec>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b2b      	ldr	r3, [pc, #172]	; (800071c <SystemClock_Config+0xec>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <SystemClock_Config+0xf0>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemClock_Config+0xf0>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6013      	str	r3, [r2, #0]
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <SystemClock_Config+0xf0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 f88c 	bl	80017d0 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006be:	f000 f971 	bl	80009a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fb20 	bl	8001d2c <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 f957 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fce7 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000710:	f000 f948 	bl	80009a4 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	37e0      	adds	r7, #224	; 0xe0
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_CAN1_Init+0x68>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <MX_CAN1_Init+0x6c>)
 800072c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 100;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_CAN1_Init+0x68>)
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_CAN1_Init+0x68>)
 8000736:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_CAN1_Init+0x68>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_CAN1_Init+0x68>)
 8000744:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000748:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_CAN1_Init+0x68>)
 800074c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000750:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_CAN1_Init+0x68>)
 8000754:	2200      	movs	r2, #0
 8000756:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_CAN1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_CAN1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_CAN1_Init+0x68>)
 8000766:	2201      	movs	r2, #1
 8000768:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_CAN1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_CAN1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_CAN1_Init+0x68>)
 8000778:	f000 fafc 	bl	8000d74 <HAL_CAN_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000782:	f000 f90f 	bl	80009a4 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000120 	.word	0x20000120
 8000790:	40006400 	.word	0x40006400

08000794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART3_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_USART3_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART3_UART_Init+0x58>)
 80007d8:	f002 f8a6 	bl	8002928 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 f8df 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000009c 	.word	0x2000009c
 80007f0:	40004800 	.word	0x40004800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a27      	ldr	r2, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a21      	ldr	r2, [pc, #132]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2101      	movs	r1, #1
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <MX_GPIO_Init+0xd4>)
 8000870:	f000 ff7c 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_GPIO_Init+0xd8>)
 800087c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4811      	ldr	r0, [pc, #68]	; (80008d0 <MX_GPIO_Init+0xdc>)
 800088a:	f000 fdc3 	bl	8001414 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4808      	ldr	r0, [pc, #32]	; (80008c8 <MX_GPIO_Init+0xd4>)
 80008a6:	f000 fdb5 	bl	8001414 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f000 fd79 	bl	80013a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f000 fd92 	bl	80013de <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	; 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	10210000 	.word	0x10210000
 80008d0:	40020800 	.word	0x40020800

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin){
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e4:	d109      	bne.n	80008fa <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2101      	movs	r1, #1
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <HAL_GPIO_EXTI_Callback+0x30>)
 80008ec:	f000 ff3e 	bl	800176c <HAL_GPIO_WritePin>
		CAN1_Tx();
 80008f0:	f000 f80c 	bl	800090c <CAN1_Tx>
		button=1;
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_GPIO_EXTI_Callback+0x34>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
	}
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40020400 	.word	0x40020400
 8000908:	2000008c 	.word	0x2000008c

0800090c <CAN1_Tx>:
void CAN1_Tx(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b096      	sub	sp, #88	; 0x58
 8000910:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t our_message[5]={'H','E','L','L','O'};
 8000912:	4a20      	ldr	r2, [pc, #128]	; (8000994 <CAN1_Tx+0x88>)
 8000914:	463b      	mov	r3, r7
 8000916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091a:	6018      	str	r0, [r3, #0]
 800091c:	3304      	adds	r3, #4
 800091e:	7019      	strb	r1, [r3, #0]
	HAL_CAN_Start(&hcan1);
 8000920:	481d      	ldr	r0, [pc, #116]	; (8000998 <CAN1_Tx+0x8c>)
 8000922:	f000 fb22 	bl	8000f6a <HAL_CAN_Start>
	TxHeader.DLC = 5;
 8000926:	2305      	movs	r3, #5
 8000928:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x65D;
 800092a:	f240 635d 	movw	r3, #1629	; 0x65d
 800092e:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox)!=HAL_OK){
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	463a      	mov	r2, r7
 800093e:	f107 010c 	add.w	r1, r7, #12
 8000942:	4815      	ldr	r0, [pc, #84]	; (8000998 <CAN1_Tx+0x8c>)
 8000944:	f000 fb55 	bl	8000ff2 <HAL_CAN_AddTxMessage>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <CAN1_Tx+0x46>

		Error_Handler();
 800094e:	f000 f829 	bl	80009a4 <Error_Handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 8000952:	bf00      	nop
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	4619      	mov	r1, r3
 8000958:	480f      	ldr	r0, [pc, #60]	; (8000998 <CAN1_Tx+0x8c>)
 800095a:	f000 fc25 	bl	80011a8 <HAL_CAN_IsTxMessagePending>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d1f7      	bne.n	8000954 <CAN1_Tx+0x48>

	sprintf(msg,"Message Transmitted\r\n");
 8000964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000968:	490c      	ldr	r1, [pc, #48]	; (800099c <CAN1_Tx+0x90>)
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fcba 	bl	80032e4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fc63 	bl	8000240 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <CAN1_Tx+0x94>)
 8000988:	f002 f81c 	bl	80029c4 <HAL_UART_Transmit>

}
 800098c:	bf00      	nop
 800098e:	3758      	adds	r7, #88	; 0x58
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08003b70 	.word	0x08003b70
 8000998:	20000120 	.word	0x20000120
 800099c:	08003b58 	.word	0x08003b58
 80009a0:	2000009c 	.word	0x2000009c

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a20      	ldr	r2, [pc, #128]	; (8000a98 <HAL_CAN_MspInit+0xa0>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d139      	bne.n	8000a8e <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a1f      	ldr	r2, [pc, #124]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <HAL_CAN_MspInit+0xa4>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a5c:	2309      	movs	r3, #9
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <HAL_CAN_MspInit+0xa8>)
 8000a68:	f000 fcd4 	bl	8001414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a7e:	2309      	movs	r3, #9
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_CAN_MspInit+0xa8>)
 8000a8a:	f000 fcc3 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40006400 	.word	0x40006400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_UART_MspInit+0x7c>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d128      	bne.n	8000b18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_UART_MspInit+0x80>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0308 	and.w	r3, r3, #8
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_UART_MspInit+0x84>)
 8000b14:	f000 fc7e 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40004800 	.word	0x40004800
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020c00 	.word	0x40020c00

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <NMI_Handler+0x4>

08000b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <MemManage_Handler+0x4>

08000b3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <BusFault_Handler+0x4>

08000b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <UsageFault_Handler+0x4>

08000b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f8b8 	bl	8000cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b88:	f000 fe0a 	bl	80017a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <_sbrk>:
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
 8000bc0:	f002 fb5e 	bl	8003280 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20080000 	.word	0x20080000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20000090 	.word	0x20000090
 8000bf8:	20000160 	.word	0x20000160

08000bfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:
 8000c2e:	58d4      	ldr	r4, [r2, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:
 8000c34:	18c4      	adds	r4, r0, r3
 8000c36:	428c      	cmp	r4, r1
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:
 8000c46:	42a2      	cmp	r2, r4
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
 8000c4e:	f002 fb1d 	bl	800328c <__libc_init_array>
 8000c52:	f7ff fcc9 	bl	80005e8 <main>
 8000c56:	4770      	bx	lr
 8000c58:	20080000 	.word	0x20080000
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000070 	.word	0x20000070
 8000c64:	08003bd4 	.word	0x08003bd4
 8000c68:	20000070 	.word	0x20000070
 8000c6c:	2000015c 	.word	0x2000015c

08000c70 <ADC_IRQHandler>:
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>

08000c72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 fb8a 	bl	8001390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7c:	200f      	movs	r0, #15
 8000c7e:	f000 f805 	bl	8000c8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c82:	f7ff fe95 	bl	80009b0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x54>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_InitTick+0x58>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fba5 	bl	80013fa <HAL_SYSTICK_Config>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00e      	b.n	8000cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d80a      	bhi.n	8000cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	6879      	ldr	r1, [r7, #4]
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f000 fb6d 	bl	80013a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e000      	b.n	8000cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000004 	.word	0x20000004

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000148 	.word	0x20000148

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000148 	.word	0x20000148

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff ffee 	bl	8000d14 <HAL_GetTick>
 8000d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4413      	add	r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d52:	bf00      	nop
 8000d54:	f7ff ffde 	bl	8000d14 <HAL_GetTick>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008

08000d74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0ed      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fe30 	bl	80009f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 0202 	bic.w	r2, r2, #2
 8000da6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da8:	f7ff ffb4 	bl	8000d14 <HAL_GetTick>
 8000dac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dae:	e012      	b.n	8000dd6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000db0:	f7ff ffb0 	bl	8000d14 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b0a      	cmp	r3, #10
 8000dbc:	d90b      	bls.n	8000dd6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2205      	movs	r2, #5
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0c5      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1e5      	bne.n	8000db0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0201 	orr.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df4:	f7ff ff8e 	bl	8000d14 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff ff8a 	bl	8000d14 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e09f      	b.n	8000f62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0e5      	beq.n	8000dfc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e1b      	ldrb	r3, [r3, #24]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7e5b      	ldrb	r3, [r3, #25]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7e9b      	ldrb	r3, [r3, #26]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0220 	orr.w	r2, r2, #32
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0220 	bic.w	r2, r2, #32
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7edb      	ldrb	r3, [r3, #27]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0210 	bic.w	r2, r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0210 	orr.w	r2, r2, #16
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7f1b      	ldrb	r3, [r3, #28]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d108      	bne.n	8000ef2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0208 	orr.w	r2, r2, #8
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e007      	b.n	8000f02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0208 	bic.w	r2, r2, #8
 8000f00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7f5b      	ldrb	r3, [r3, #29]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d108      	bne.n	8000f1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f042 0204 	orr.w	r2, r2, #4
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e007      	b.n	8000f2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0204 	bic.w	r2, r2, #4
 8000f2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	431a      	orrs	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	ea42 0103 	orr.w	r1, r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d12e      	bne.n	8000fdc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2202      	movs	r2, #2
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 0201 	bic.w	r2, r2, #1
 8000f94:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f96:	f7ff febd 	bl	8000d14 <HAL_GetTick>
 8000f9a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f9c:	e012      	b.n	8000fc4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f9e:	f7ff feb9 	bl	8000d14 <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d90b      	bls.n	8000fc4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2205      	movs	r2, #5
 8000fbc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e012      	b.n	8000fea <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1e5      	bne.n	8000f9e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e006      	b.n	8000fea <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
  }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b089      	sub	sp, #36	; 0x24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	60f8      	str	r0, [r7, #12]
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001006:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001010:	7ffb      	ldrb	r3, [r7, #31]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <HAL_CAN_AddTxMessage+0x2c>
 8001016:	7ffb      	ldrb	r3, [r7, #31]
 8001018:	2b02      	cmp	r3, #2
 800101a:	f040 80b8 	bne.w	800118e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d10a      	bne.n	800103e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80a0 	beq.w	800117e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	0e1b      	lsrs	r3, r3, #24
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	2b02      	cmp	r3, #2
 800104c:	d907      	bls.n	800105e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e09e      	b.n	800119c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800105e:	2201      	movs	r2, #1
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10d      	bne.n	800108c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800107a:	68f9      	ldr	r1, [r7, #12]
 800107c:	6809      	ldr	r1, [r1, #0]
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3318      	adds	r3, #24
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	440b      	add	r3, r1
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e00f      	b.n	80010ac <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001096:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800109c:	68f9      	ldr	r1, [r7, #12]
 800109e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3318      	adds	r3, #24
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	440b      	add	r3, r1
 80010aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	3318      	adds	r3, #24
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	7d1b      	ldrb	r3, [r3, #20]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d111      	bne.n	80010ec <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3318      	adds	r3, #24
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	6811      	ldr	r1, [r2, #0]
 80010dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3318      	adds	r3, #24
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	440b      	add	r3, r1
 80010e8:	3304      	adds	r3, #4
 80010ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3307      	adds	r3, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	061a      	lsls	r2, r3, #24
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3306      	adds	r3, #6
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	041b      	lsls	r3, r3, #16
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3305      	adds	r3, #5
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	4313      	orrs	r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	3204      	adds	r2, #4
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4610      	mov	r0, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	6811      	ldr	r1, [r2, #0]
 8001114:	ea43 0200 	orr.w	r2, r3, r0
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	440b      	add	r3, r1
 800111e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001122:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3303      	adds	r3, #3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	061a      	lsls	r2, r3, #24
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3302      	adds	r3, #2
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	041b      	lsls	r3, r3, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3301      	adds	r3, #1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4313      	orrs	r3, r2
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	4610      	mov	r0, r2
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	6811      	ldr	r1, [r2, #0]
 800114a:	ea43 0200 	orr.w	r2, r3, r0
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	011b      	lsls	r3, r3, #4
 8001152:	440b      	add	r3, r1
 8001154:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001158:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3318      	adds	r3, #24
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	6811      	ldr	r1, [r2, #0]
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3318      	adds	r3, #24
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800117a:	2300      	movs	r3, #0
 800117c:	e00e      	b.n	800119c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e006      	b.n	800119c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
  }
}
 800119c:	4618      	mov	r0, r3
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011bc:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80011be:	7afb      	ldrb	r3, [r7, #11]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d002      	beq.n	80011ca <HAL_CAN_IsTxMessagePending+0x22>
 80011c4:	7afb      	ldrb	r3, [r7, #11]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d10b      	bne.n	80011e2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	069b      	lsls	r3, r3, #26
 80011d4:	401a      	ands	r2, r3
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	069b      	lsls	r3, r3, #26
 80011da:	429a      	cmp	r2, r3
 80011dc:	d001      	beq.n	80011e2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80011de:	2301      	movs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 800121a:	4313      	orrs	r3, r2
 800121c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <__NVIC_SetPriorityGrouping+0x40>)
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60d3      	str	r3, [r2, #12]
}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	05fa0000 	.word	0x05fa0000

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	2b00      	cmp	r3, #0
 8001264:	db0b      	blt.n	800127e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 021f 	and.w	r2, r3, #31
 800126c:	4907      	ldr	r1, [pc, #28]	; (800128c <__NVIC_EnableIRQ+0x38>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	095b      	lsrs	r3, r3, #5
 8001274:	2001      	movs	r0, #1
 8001276:	fa00 f202 	lsl.w	r2, r0, r2
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000e100 	.word	0xe000e100

08001290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	6039      	str	r1, [r7, #0]
 800129a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	db0a      	blt.n	80012ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <__NVIC_SetPriority+0x4c>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b8:	e00a      	b.n	80012d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <__NVIC_SetPriority+0x50>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	3b04      	subs	r3, #4
 80012c8:	0112      	lsls	r2, r2, #4
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	440b      	add	r3, r1
 80012ce:	761a      	strb	r2, [r3, #24]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	e000e100 	.word	0xe000e100
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b089      	sub	sp, #36	; 0x24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f1c3 0307 	rsb	r3, r3, #7
 80012fe:	2b04      	cmp	r3, #4
 8001300:	bf28      	it	cs
 8001302:	2304      	movcs	r3, #4
 8001304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3304      	adds	r3, #4
 800130a:	2b06      	cmp	r3, #6
 800130c:	d902      	bls.n	8001314 <NVIC_EncodePriority+0x30>
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3b03      	subs	r3, #3
 8001312:	e000      	b.n	8001316 <NVIC_EncodePriority+0x32>
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43da      	mvns	r2, r3
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	fa01 f303 	lsl.w	r3, r1, r3
 8001336:	43d9      	mvns	r1, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800133c:	4313      	orrs	r3, r2
         );
}
 800133e:	4618      	mov	r0, r3
 8001340:	3724      	adds	r7, #36	; 0x24
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800135c:	d301      	bcc.n	8001362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800135e:	2301      	movs	r3, #1
 8001360:	e00f      	b.n	8001382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <SysTick_Config+0x40>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b01      	subs	r3, #1
 8001368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136a:	210f      	movs	r1, #15
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f7ff ff8e 	bl	8001290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <SysTick_Config+0x40>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SysTick_Config+0x40>)
 800137c:	2207      	movs	r2, #7
 800137e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	e000e010 	.word	0xe000e010

08001390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ff29 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b086      	sub	sp, #24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013b8:	f7ff ff3e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 80013bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	68b9      	ldr	r1, [r7, #8]
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff ff8e 	bl	80012e4 <NVIC_EncodePriority>
 80013c8:	4602      	mov	r2, r0
 80013ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff5d 	bl	8001290 <__NVIC_SetPriority>
}
 80013d6:	bf00      	nop
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff31 	bl	8001254 <__NVIC_EnableIRQ>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff ffa2 	bl	800134c <SysTick_Config>
 8001408:	4603      	mov	r3, r0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b480      	push	{r7}
 8001416:	b089      	sub	sp, #36	; 0x24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e175      	b.n	8001720 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001434:	2201      	movs	r2, #1
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	429a      	cmp	r2, r3
 800144e:	f040 8164 	bne.w	800171a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00b      	beq.n	8001472 <HAL_GPIO_Init+0x5e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d007      	beq.n	8001472 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001466:	2b11      	cmp	r3, #17
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b12      	cmp	r3, #18
 8001470:	d130      	bne.n	80014d4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 0201 	and.w	r2, r3, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x100>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4013      	ands	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	69b9      	ldr	r1, [r7, #24]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80be 	beq.w	800171a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159e:	4b66      	ldr	r3, [pc, #408]	; (8001738 <HAL_GPIO_Init+0x324>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a65      	ldr	r2, [pc, #404]	; (8001738 <HAL_GPIO_Init+0x324>)
 80015a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b63      	ldr	r3, [pc, #396]	; (8001738 <HAL_GPIO_Init+0x324>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015b6:	4a61      	ldr	r2, [pc, #388]	; (800173c <HAL_GPIO_Init+0x328>)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	3302      	adds	r3, #2
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	220f      	movs	r2, #15
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x32c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d037      	beq.n	8001652 <HAL_GPIO_Init+0x23e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_GPIO_Init+0x330>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d031      	beq.n	800164e <HAL_GPIO_Init+0x23a>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a56      	ldr	r2, [pc, #344]	; (8001748 <HAL_GPIO_Init+0x334>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d02b      	beq.n	800164a <HAL_GPIO_Init+0x236>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a55      	ldr	r2, [pc, #340]	; (800174c <HAL_GPIO_Init+0x338>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d025      	beq.n	8001646 <HAL_GPIO_Init+0x232>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a54      	ldr	r2, [pc, #336]	; (8001750 <HAL_GPIO_Init+0x33c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01f      	beq.n	8001642 <HAL_GPIO_Init+0x22e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a53      	ldr	r2, [pc, #332]	; (8001754 <HAL_GPIO_Init+0x340>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d019      	beq.n	800163e <HAL_GPIO_Init+0x22a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_GPIO_Init+0x344>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x226>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a51      	ldr	r2, [pc, #324]	; (800175c <HAL_GPIO_Init+0x348>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x222>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a50      	ldr	r2, [pc, #320]	; (8001760 <HAL_GPIO_Init+0x34c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x21e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <HAL_GPIO_Init+0x350>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x21a>
 800162a:	2309      	movs	r3, #9
 800162c:	e012      	b.n	8001654 <HAL_GPIO_Init+0x240>
 800162e:	230a      	movs	r3, #10
 8001630:	e010      	b.n	8001654 <HAL_GPIO_Init+0x240>
 8001632:	2308      	movs	r3, #8
 8001634:	e00e      	b.n	8001654 <HAL_GPIO_Init+0x240>
 8001636:	2307      	movs	r3, #7
 8001638:	e00c      	b.n	8001654 <HAL_GPIO_Init+0x240>
 800163a:	2306      	movs	r3, #6
 800163c:	e00a      	b.n	8001654 <HAL_GPIO_Init+0x240>
 800163e:	2305      	movs	r3, #5
 8001640:	e008      	b.n	8001654 <HAL_GPIO_Init+0x240>
 8001642:	2304      	movs	r3, #4
 8001644:	e006      	b.n	8001654 <HAL_GPIO_Init+0x240>
 8001646:	2303      	movs	r3, #3
 8001648:	e004      	b.n	8001654 <HAL_GPIO_Init+0x240>
 800164a:	2302      	movs	r3, #2
 800164c:	e002      	b.n	8001654 <HAL_GPIO_Init+0x240>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_GPIO_Init+0x240>
 8001652:	2300      	movs	r3, #0
 8001654:	69fa      	ldr	r2, [r7, #28]
 8001656:	f002 0203 	and.w	r2, r2, #3
 800165a:	0092      	lsls	r2, r2, #2
 800165c:	4093      	lsls	r3, r2
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001664:	4935      	ldr	r1, [pc, #212]	; (800173c <HAL_GPIO_Init+0x328>)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	3302      	adds	r3, #2
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_GPIO_Init+0x354>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001696:	4a34      	ldr	r2, [pc, #208]	; (8001768 <HAL_GPIO_Init+0x354>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800169c:	4b32      	ldr	r3, [pc, #200]	; (8001768 <HAL_GPIO_Init+0x354>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016c0:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_GPIO_Init+0x354>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_GPIO_Init+0x354>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016ea:	4a1f      	ldr	r2, [pc, #124]	; (8001768 <HAL_GPIO_Init+0x354>)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016f0:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_GPIO_Init+0x354>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800170c:	69ba      	ldr	r2, [r7, #24]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <HAL_GPIO_Init+0x354>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3301      	adds	r3, #1
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	2b0f      	cmp	r3, #15
 8001724:	f67f ae86 	bls.w	8001434 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40013800 	.word	0x40013800
 8001740:	40020000 	.word	0x40020000
 8001744:	40020400 	.word	0x40020400
 8001748:	40020800 	.word	0x40020800
 800174c:	40020c00 	.word	0x40020c00
 8001750:	40021000 	.word	0x40021000
 8001754:	40021400 	.word	0x40021400
 8001758:	40021800 	.word	0x40021800
 800175c:	40021c00 	.word	0x40021c00
 8001760:	40022000 	.word	0x40022000
 8001764:	40022400 	.word	0x40022400
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b6:	4a05      	ldr	r2, [pc, #20]	; (80017cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f888 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40013c00 	.word	0x40013c00

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e29b      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8087 	beq.w	8001902 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f4:	4b96      	ldr	r3, [pc, #600]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d00c      	beq.n	800181a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001800:	4b93      	ldr	r3, [pc, #588]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d112      	bne.n	8001832 <HAL_RCC_OscConfig+0x62>
 800180c:	4b90      	ldr	r3, [pc, #576]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b8d      	ldr	r3, [pc, #564]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06c      	beq.n	8001900 <HAL_RCC_OscConfig+0x130>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d168      	bne.n	8001900 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e275      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x7a>
 800183c:	4b84      	ldr	r3, [pc, #528]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a83      	ldr	r2, [pc, #524]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0xd8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x9c>
 8001852:	4b7f      	ldr	r3, [pc, #508]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7e      	ldr	r2, [pc, #504]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b7c      	ldr	r3, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a7b      	ldr	r2, [pc, #492]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xd8>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xc0>
 8001876:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xd8>
 8001890:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b6c      	ldr	r3, [pc, #432]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6b      	ldr	r2, [pc, #428]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fa30 	bl	8000d14 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fa2c 	bl	8000d14 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e229      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b61      	ldr	r3, [pc, #388]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe8>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fa1c 	bl	8000d14 <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fa18 	bl	8000d14 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e215      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b57      	ldr	r3, [pc, #348]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x110>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d069      	beq.n	80019e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x190>
 8001926:	4b4a      	ldr	r3, [pc, #296]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b47      	ldr	r3, [pc, #284]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x17a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1e9      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	493d      	ldr	r1, [pc, #244]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e040      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f9ce 	bl	8000d14 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197c:	f7ff f9ca 	bl	8000d14 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1c7      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b30      	ldr	r3, [pc, #192]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4929      	ldr	r1, [pc, #164]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
 80019ae:	e018      	b.n	80019e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019bc:	f7ff f9aa 	bl	8000d14 <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c4:	f7ff f9a6 	bl	8000d14 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1a3      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d038      	beq.n	8001a60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d019      	beq.n	8001a2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f987 	bl	8000d14 <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff f983 	bl	8000d14 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e180      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x23a>
 8001a28:	e01a      	b.n	8001a60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a2e:	4a08      	ldr	r2, [pc, #32]	; (8001a50 <HAL_RCC_OscConfig+0x280>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f96d 	bl	8000d14 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f969 	bl	8000d14 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d903      	bls.n	8001a54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e166      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
 8001a50:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b92      	ldr	r3, [pc, #584]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1ee      	bne.n	8001a3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	f000 80a4 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b8c      	ldr	r3, [pc, #560]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10d      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b89      	ldr	r3, [pc, #548]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a88      	ldr	r2, [pc, #544]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b86      	ldr	r3, [pc, #536]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4b83      	ldr	r3, [pc, #524]	; (8001ca4 <HAL_RCC_OscConfig+0x4d4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aa2:	4b80      	ldr	r3, [pc, #512]	; (8001ca4 <HAL_RCC_OscConfig+0x4d4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7f      	ldr	r2, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x4d4>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff f931 	bl	8000d14 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff f92d 	bl	8000d14 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b64      	cmp	r3, #100	; 0x64
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e12a      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac8:	4b76      	ldr	r3, [pc, #472]	; (8001ca4 <HAL_RCC_OscConfig+0x4d4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d106      	bne.n	8001aea <HAL_RCC_OscConfig+0x31a>
 8001adc:	4b70      	ldr	r3, [pc, #448]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	4a6f      	ldr	r2, [pc, #444]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae8:	e02d      	b.n	8001b46 <HAL_RCC_OscConfig+0x376>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x33c>
 8001af2:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	4a6a      	ldr	r2, [pc, #424]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	6713      	str	r3, [r2, #112]	; 0x70
 8001afe:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b02:	4a67      	ldr	r2, [pc, #412]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b04:	f023 0304 	bic.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	; 0x70
 8001b0a:	e01c      	b.n	8001b46 <HAL_RCC_OscConfig+0x376>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d10c      	bne.n	8001b2e <HAL_RCC_OscConfig+0x35e>
 8001b14:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b18:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b1a:	f043 0304 	orr.w	r3, r3, #4
 8001b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b20:	4b5f      	ldr	r3, [pc, #380]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b24:	4a5e      	ldr	r2, [pc, #376]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2c:	e00b      	b.n	8001b46 <HAL_RCC_OscConfig+0x376>
 8001b2e:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	4a5b      	ldr	r2, [pc, #364]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3a:	4b59      	ldr	r3, [pc, #356]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	f023 0304 	bic.w	r3, r3, #4
 8001b44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d015      	beq.n	8001b7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7ff f8e1 	bl	8000d14 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f7ff f8dd 	bl	8000d14 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d0ee      	beq.n	8001b56 <HAL_RCC_OscConfig+0x386>
 8001b78:	e014      	b.n	8001ba4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f8cb 	bl	8000d14 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff f8c7 	bl	8000d14 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0c2      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	4b41      	ldr	r3, [pc, #260]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d105      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80ae 	beq.w	8001d1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d06d      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d14b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f898 	bl	8000d14 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff f894 	bl	8000d14 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e091      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69da      	ldr	r2, [r3, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	431a      	orrs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	041b      	lsls	r3, r3, #16
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	071b      	lsls	r3, r3, #28
 8001c32:	491b      	ldr	r1, [pc, #108]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c44:	f7ff f866 	bl	8000d14 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7ff f862 	bl	8000d14 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e05f      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f0      	beq.n	8001c4c <HAL_RCC_OscConfig+0x47c>
 8001c6a:	e057      	b.n	8001d1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0b      	ldr	r2, [pc, #44]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f84c 	bl	8000d14 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f848 	bl	8000d14 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e045      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCC_OscConfig+0x4d0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x4b0>
 8001c9e:	e03d      	b.n	8001d1c <HAL_RCC_OscConfig+0x54c>
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <HAL_RCC_OscConfig+0x558>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d030      	beq.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d129      	bne.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d122      	bne.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cde:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d119      	bne.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10f      	bne.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0d0      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d44:	4b6a      	ldr	r3, [pc, #424]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d910      	bls.n	8001d74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b67      	ldr	r3, [pc, #412]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 020f 	bic.w	r2, r3, #15
 8001d5a:	4965      	ldr	r1, [pc, #404]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d62:	4b63      	ldr	r3, [pc, #396]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e0b8      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d020      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d005      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d8c:	4b59      	ldr	r3, [pc, #356]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db0:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	494d      	ldr	r1, [pc, #308]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d040      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dd6:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e07f      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dee:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e073      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfe:	4b3d      	ldr	r3, [pc, #244]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e06b      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e0e:	4b39      	ldr	r3, [pc, #228]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4936      	ldr	r1, [pc, #216]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e20:	f7fe ff78 	bl	8000d14 <HAL_GetTick>
 8001e24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e28:	f7fe ff74 	bl	8000d14 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e053      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 020c 	and.w	r2, r3, #12
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d1eb      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e50:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d210      	bcs.n	8001e80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 020f 	bic.w	r2, r3, #15
 8001e66:	4922      	ldr	r1, [pc, #136]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b20      	ldr	r3, [pc, #128]	; (8001ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e032      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	490e      	ldr	r1, [pc, #56]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ebe:	f000 f821 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	490a      	ldr	r1, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ed0:	5ccb      	ldrb	r3, [r1, r3]
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x1d0>)
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eda:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <HAL_RCC_ClockConfig+0x1d4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fed4 	bl	8000c8c <HAL_InitTick>

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023c00 	.word	0x40023c00
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08003b78 	.word	0x08003b78
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000004 	.word	0x20000004

08001f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f04:	b5b0      	push	{r4, r5, r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	6079      	str	r1, [r7, #4]
 8001f0e:	2100      	movs	r1, #0
 8001f10:	60f9      	str	r1, [r7, #12]
 8001f12:	2100      	movs	r1, #0
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f16:	2100      	movs	r1, #0
 8001f18:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f1a:	4952      	ldr	r1, [pc, #328]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f1c:	6889      	ldr	r1, [r1, #8]
 8001f1e:	f001 010c 	and.w	r1, r1, #12
 8001f22:	2908      	cmp	r1, #8
 8001f24:	d00d      	beq.n	8001f42 <HAL_RCC_GetSysClockFreq+0x3e>
 8001f26:	2908      	cmp	r1, #8
 8001f28:	f200 8094 	bhi.w	8002054 <HAL_RCC_GetSysClockFreq+0x150>
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_RCC_GetSysClockFreq+0x32>
 8001f30:	2904      	cmp	r1, #4
 8001f32:	d003      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x38>
 8001f34:	e08e      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f38:	60bb      	str	r3, [r7, #8]
      break;
 8001f3a:	e08e      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_GetSysClockFreq+0x168>)
 8001f3e:	60bb      	str	r3, [r7, #8]
      break;
 8001f40:	e08b      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f42:	4948      	ldr	r1, [pc, #288]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f44:	6849      	ldr	r1, [r1, #4]
 8001f46:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f4a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f4c:	4945      	ldr	r1, [pc, #276]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f4e:	6849      	ldr	r1, [r1, #4]
 8001f50:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f54:	2900      	cmp	r1, #0
 8001f56:	d024      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f58:	4942      	ldr	r1, [pc, #264]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f5a:	6849      	ldr	r1, [r1, #4]
 8001f5c:	0989      	lsrs	r1, r1, #6
 8001f5e:	4608      	mov	r0, r1
 8001f60:	f04f 0100 	mov.w	r1, #0
 8001f64:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f68:	f04f 0500 	mov.w	r5, #0
 8001f6c:	ea00 0204 	and.w	r2, r0, r4
 8001f70:	ea01 0305 	and.w	r3, r1, r5
 8001f74:	493d      	ldr	r1, [pc, #244]	; (800206c <HAL_RCC_GetSysClockFreq+0x168>)
 8001f76:	fb01 f003 	mul.w	r0, r1, r3
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	fb01 f102 	mul.w	r1, r1, r2
 8001f80:	1844      	adds	r4, r0, r1
 8001f82:	493a      	ldr	r1, [pc, #232]	; (800206c <HAL_RCC_GetSysClockFreq+0x168>)
 8001f84:	fba2 0101 	umull	r0, r1, r2, r1
 8001f88:	1863      	adds	r3, r4, r1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f7fe f9ac 	bl	80002f0 <__aeabi_uldivmod>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	e04a      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	099b      	lsrs	r3, r3, #6
 8001fa8:	461a      	mov	r2, r3
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	ea02 0400 	and.w	r4, r2, r0
 8001fba:	ea03 0501 	and.w	r5, r3, r1
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f04f 0200 	mov.w	r2, #0
 8001fc6:	f04f 0300 	mov.w	r3, #0
 8001fca:	014b      	lsls	r3, r1, #5
 8001fcc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd0:	0142      	lsls	r2, r0, #5
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	1b00      	subs	r0, r0, r4
 8001fd8:	eb61 0105 	sbc.w	r1, r1, r5
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	018b      	lsls	r3, r1, #6
 8001fe6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fea:	0182      	lsls	r2, r0, #6
 8001fec:	1a12      	subs	r2, r2, r0
 8001fee:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff2:	f04f 0000 	mov.w	r0, #0
 8001ff6:	f04f 0100 	mov.w	r1, #0
 8001ffa:	00d9      	lsls	r1, r3, #3
 8001ffc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002000:	00d0      	lsls	r0, r2, #3
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	1912      	adds	r2, r2, r4
 8002008:	eb45 0303 	adc.w	r3, r5, r3
 800200c:	f04f 0000 	mov.w	r0, #0
 8002010:	f04f 0100 	mov.w	r1, #0
 8002014:	0299      	lsls	r1, r3, #10
 8002016:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800201a:	0290      	lsls	r0, r2, #10
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4610      	mov	r0, r2
 8002022:	4619      	mov	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	f7fe f960 	bl	80002f0 <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_RCC_GetSysClockFreq+0x160>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	3301      	adds	r3, #1
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	60bb      	str	r3, [r7, #8]
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <HAL_RCC_GetSysClockFreq+0x164>)
 8002056:	60bb      	str	r3, [r7, #8]
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	68bb      	ldr	r3, [r7, #8]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bdb0      	pop	{r4, r5, r7, pc}
 8002064:	40023800 	.word	0x40023800
 8002068:	00f42400 	.word	0x00f42400
 800206c:	017d7840 	.word	0x017d7840

08002070 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_RCC_GetHCLKFreq+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000000 	.word	0x20000000

08002088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800208c:	f7ff fff0 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0a9b      	lsrs	r3, r3, #10
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	08003b88 	.word	0x08003b88

080020b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020b4:	f7ff ffdc 	bl	8002070 <HAL_RCC_GetHCLKFreq>
 80020b8:	4602      	mov	r2, r0
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	0b5b      	lsrs	r3, r3, #13
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	4903      	ldr	r1, [pc, #12]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020c6:	5ccb      	ldrb	r3, [r1, r3]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40023800 	.word	0x40023800
 80020d4:	08003b88 	.word	0x08003b88

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d012      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4a68      	ldr	r2, [pc, #416]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	4b66      	ldr	r3, [pc, #408]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002114:	4964      	ldr	r1, [pc, #400]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d017      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002132:	4b5d      	ldr	r3, [pc, #372]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	4959      	ldr	r1, [pc, #356]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002152:	2301      	movs	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800215e:	2301      	movs	r3, #1
 8002160:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d017      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800216e:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002174:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	494a      	ldr	r1, [pc, #296]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800218c:	d101      	bne.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 808b 	beq.w	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021bc:	4b3a      	ldr	r3, [pc, #232]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	4a39      	ldr	r2, [pc, #228]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c6:	6413      	str	r3, [r2, #64]	; 0x40
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021d4:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a34      	ldr	r2, [pc, #208]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e0:	f7fe fd98 	bl	8000d14 <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7fe fd94 	bl	8000d14 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e38f      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002206:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d035      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d02e      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002224:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a1d      	ldr	r2, [pc, #116]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223e:	4a1a      	ldr	r2, [pc, #104]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d114      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fd5c 	bl	8000d14 <HAL_GetTick>
 800225c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	e00a      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7fe fd58 	bl	8000d14 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e351      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0ee      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800228e:	d111      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002290:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800229e:	400b      	ands	r3, r1
 80022a0:	4901      	ldr	r1, [pc, #4]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	608b      	str	r3, [r1, #8]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40007000 	.word	0x40007000
 80022b0:	0ffffcff 	.word	0x0ffffcff
 80022b4:	4bb3      	ldr	r3, [pc, #716]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4ab2      	ldr	r2, [pc, #712]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022be:	6093      	str	r3, [r2, #8]
 80022c0:	4bb0      	ldr	r3, [pc, #704]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022cc:	49ad      	ldr	r1, [pc, #692]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022de:	4ba9      	ldr	r3, [pc, #676]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e4:	4aa7      	ldr	r2, [pc, #668]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022ee:	4ba5      	ldr	r3, [pc, #660]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	49a2      	ldr	r1, [pc, #648]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800230c:	4b9d      	ldr	r3, [pc, #628]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231a:	499a      	ldr	r1, [pc, #616]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800232e:	4b95      	ldr	r3, [pc, #596]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800233c:	4991      	ldr	r1, [pc, #580]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002350:	4b8c      	ldr	r3, [pc, #560]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800235e:	4989      	ldr	r1, [pc, #548]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002360:	4313      	orrs	r3, r2
 8002362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002372:	4b84      	ldr	r3, [pc, #528]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4980      	ldr	r1, [pc, #512]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002382:	4313      	orrs	r3, r2
 8002384:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002394:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4978      	ldr	r1, [pc, #480]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00a      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023b6:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f023 020c 	bic.w	r2, r3, #12
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c4:	496f      	ldr	r1, [pc, #444]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e6:	4967      	ldr	r1, [pc, #412]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023fa:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002408:	495e      	ldr	r1, [pc, #376]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00a      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800241c:	4b59      	ldr	r3, [pc, #356]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	4956      	ldr	r1, [pc, #344]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242c:	4313      	orrs	r3, r2
 800242e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	494d      	ldr	r1, [pc, #308]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002460:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246e:	4945      	ldr	r1, [pc, #276]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002482:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002488:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002490:	493c      	ldr	r1, [pc, #240]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024a4:	4b37      	ldr	r3, [pc, #220]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d011      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024d4:	492b      	ldr	r1, [pc, #172]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024e4:	d101      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002514:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00b      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002528:	4b16      	ldr	r3, [pc, #88]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00b      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	4909      	ldr	r1, [pc, #36]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00f      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	e002      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	4986      	ldr	r1, [pc, #536]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00b      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800259c:	4b81      	ldr	r3, [pc, #516]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ac:	497d      	ldr	r1, [pc, #500]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d006      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80d6 	beq.w	8002774 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025c8:	4b76      	ldr	r3, [pc, #472]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a75      	ldr	r2, [pc, #468]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fb9e 	bl	8000d14 <HAL_GetTick>
 80025d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025dc:	f7fe fb9a 	bl	8000d14 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e195      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ee:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d021      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11d      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800260e:	4b65      	ldr	r3, [pc, #404]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002614:	0c1b      	lsrs	r3, r3, #16
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800261c:	4b61      	ldr	r3, [pc, #388]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800261e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002622:	0e1b      	lsrs	r3, r3, #24
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	019a      	lsls	r2, r3, #6
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	071b      	lsls	r3, r3, #28
 8002642:	4958      	ldr	r1, [pc, #352]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002644:	4313      	orrs	r3, r2
 8002646:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02e      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002674:	d129      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267c:	0c1b      	lsrs	r3, r3, #16
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800268a:	0f1b      	lsrs	r3, r3, #28
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	019a      	lsls	r2, r3, #6
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	431a      	orrs	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	071b      	lsls	r3, r3, #28
 80026aa:	493e      	ldr	r1, [pc, #248]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026b2:	4b3c      	ldr	r3, [pc, #240]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026b8:	f023 021f 	bic.w	r2, r3, #31
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	3b01      	subs	r3, #1
 80026c2:	4938      	ldr	r1, [pc, #224]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01d      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026d6:	4b33      	ldr	r3, [pc, #204]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026dc:	0e1b      	lsrs	r3, r3, #24
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ea:	0f1b      	lsrs	r3, r3, #28
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	019a      	lsls	r2, r3, #6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	041b      	lsls	r3, r3, #16
 80026fe:	431a      	orrs	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	431a      	orrs	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	071b      	lsls	r3, r3, #28
 800270a:	4926      	ldr	r1, [pc, #152]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d011      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	431a      	orrs	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	061b      	lsls	r3, r3, #24
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	071b      	lsls	r3, r3, #28
 800273a:	491a      	ldr	r1, [pc, #104]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800274c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274e:	f7fe fae1 	bl	8000d14 <HAL_GetTick>
 8002752:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002756:	f7fe fadd 	bl	8000d14 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	d901      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0d8      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b01      	cmp	r3, #1
 8002778:	f040 80ce 	bne.w	8002918 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002788:	f7fe fac4 	bl	8000d14 <HAL_GetTick>
 800278c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800278e:	e00b      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002790:	f7fe fac0 	bl	8000d14 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	; 0x64
 800279c:	d904      	bls.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0bb      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027a8:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d0ec      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02e      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d12a      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027ec:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	0f1b      	lsrs	r3, r3, #28
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	019a      	lsls	r2, r3, #6
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	4944      	ldr	r1, [pc, #272]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002820:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	3b01      	subs	r3, #1
 800282a:	021b      	lsls	r3, r3, #8
 800282c:	493d      	ldr	r1, [pc, #244]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d022      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002848:	d11d      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	0e1b      	lsrs	r3, r3, #24
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	0f1b      	lsrs	r3, r3, #28
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	019a      	lsls	r2, r3, #6
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	041b      	lsls	r3, r3, #16
 8002872:	431a      	orrs	r2, r3
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	071b      	lsls	r3, r3, #28
 800287e:	4929      	ldr	r1, [pc, #164]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d028      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002892:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002898:	0e1b      	lsrs	r3, r3, #24
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	0c1b      	lsrs	r3, r3, #16
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	019a      	lsls	r2, r3, #6
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	431a      	orrs	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	071b      	lsls	r3, r3, #28
 80028c6:	4917      	ldr	r1, [pc, #92]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028dc:	4911      	ldr	r1, [pc, #68]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0e      	ldr	r2, [pc, #56]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f0:	f7fe fa10 	bl	8000d14 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028f8:	f7fe fa0c 	bl	8000d14 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e007      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002912:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002916:	d1ef      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3720      	adds	r7, #32
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e040      	b.n	80029bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe f8aa 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	; 0x24
 8002954:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0201 	bic.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f8c0 	bl	8002aec <UART_SetConfig>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e022      	b.n	80029bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fb16 	bl	8002fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb9d 	bl	80030f4 <UART_CheckIdleState>
 80029ba:	4603      	mov	r3, r0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	; 0x28
 80029c8:	af02      	add	r7, sp, #8
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029d8:	2b20      	cmp	r3, #32
 80029da:	f040 8081 	bne.w	8002ae0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <HAL_UART_Transmit+0x26>
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e079      	b.n	8002ae2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_UART_Transmit+0x38>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e072      	b.n	8002ae2 <HAL_UART_Transmit+0x11e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2221      	movs	r2, #33	; 0x21
 8002a10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a12:	f7fe f97f 	bl	8000d14 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	88fa      	ldrh	r2, [r7, #6]
 8002a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	88fa      	ldrh	r2, [r7, #6]
 8002a24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d108      	bne.n	8002a44 <HAL_UART_Transmit+0x80>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	e003      	b.n	8002a4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a54:	e02c      	b.n	8002ab0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	2180      	movs	r1, #128	; 0x80
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fb90 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e038      	b.n	8002ae2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	e007      	b.n	8002a9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1cc      	bne.n	8002a56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2140      	movs	r1, #64	; 0x40
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fb5d 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e005      	b.n	8002ae2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002adc:	2300      	movs	r3, #0
 8002ade:	e000      	b.n	8002ae2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
  }
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3720      	adds	r7, #32
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4ba7      	ldr	r3, [pc, #668]	; (8002db4 <UART_SetConfig+0x2c8>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a95      	ldr	r2, [pc, #596]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d120      	bne.n	8002baa <UART_SetConfig+0xbe>
 8002b68:	4b94      	ldr	r3, [pc, #592]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d816      	bhi.n	8002ba4 <UART_SetConfig+0xb8>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UART_SetConfig+0x90>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002b93 	.word	0x08002b93
 8002b88:	08002b9f 	.word	0x08002b9f
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e14f      	b.n	8002e32 <UART_SetConfig+0x346>
 8002b92:	2302      	movs	r3, #2
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	e14c      	b.n	8002e32 <UART_SetConfig+0x346>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e149      	b.n	8002e32 <UART_SetConfig+0x346>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	77fb      	strb	r3, [r7, #31]
 8002ba2:	e146      	b.n	8002e32 <UART_SetConfig+0x346>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e143      	b.n	8002e32 <UART_SetConfig+0x346>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a84      	ldr	r2, [pc, #528]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d132      	bne.n	8002c1a <UART_SetConfig+0x12e>
 8002bb4:	4b81      	ldr	r3, [pc, #516]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d828      	bhi.n	8002c14 <UART_SetConfig+0x128>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <UART_SetConfig+0xdc>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bfd 	.word	0x08002bfd
 8002bcc:	08002c15 	.word	0x08002c15
 8002bd0:	08002c15 	.word	0x08002c15
 8002bd4:	08002c15 	.word	0x08002c15
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002c15 	.word	0x08002c15
 8002be8:	08002c03 	.word	0x08002c03
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c0f 	.word	0x08002c0f
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e117      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c02:	2302      	movs	r3, #2
 8002c04:	77fb      	strb	r3, [r7, #31]
 8002c06:	e114      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e111      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e10e      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c14:	2310      	movs	r3, #16
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e10b      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a69      	ldr	r2, [pc, #420]	; (8002dc4 <UART_SetConfig+0x2d8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d120      	bne.n	8002c66 <UART_SetConfig+0x17a>
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2e:	2b30      	cmp	r3, #48	; 0x30
 8002c30:	d013      	beq.n	8002c5a <UART_SetConfig+0x16e>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d814      	bhi.n	8002c60 <UART_SetConfig+0x174>
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d009      	beq.n	8002c4e <UART_SetConfig+0x162>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d810      	bhi.n	8002c60 <UART_SetConfig+0x174>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <UART_SetConfig+0x15c>
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d006      	beq.n	8002c54 <UART_SetConfig+0x168>
 8002c46:	e00b      	b.n	8002c60 <UART_SetConfig+0x174>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e0f1      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e0ee      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c54:	2304      	movs	r3, #4
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e0eb      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e0e8      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c60:	2310      	movs	r3, #16
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e0e5      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <UART_SetConfig+0x2dc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d120      	bne.n	8002cb2 <UART_SetConfig+0x1c6>
 8002c70:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c7c:	d013      	beq.n	8002ca6 <UART_SetConfig+0x1ba>
 8002c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c80:	d814      	bhi.n	8002cac <UART_SetConfig+0x1c0>
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d009      	beq.n	8002c9a <UART_SetConfig+0x1ae>
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d810      	bhi.n	8002cac <UART_SetConfig+0x1c0>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <UART_SetConfig+0x1a8>
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d006      	beq.n	8002ca0 <UART_SetConfig+0x1b4>
 8002c92:	e00b      	b.n	8002cac <UART_SetConfig+0x1c0>
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e0cb      	b.n	8002e32 <UART_SetConfig+0x346>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e0c8      	b.n	8002e32 <UART_SetConfig+0x346>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e0c5      	b.n	8002e32 <UART_SetConfig+0x346>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e0c2      	b.n	8002e32 <UART_SetConfig+0x346>
 8002cac:	2310      	movs	r3, #16
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e0bf      	b.n	8002e32 <UART_SetConfig+0x346>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a45      	ldr	r2, [pc, #276]	; (8002dcc <UART_SetConfig+0x2e0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d125      	bne.n	8002d08 <UART_SetConfig+0x21c>
 8002cbc:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cca:	d017      	beq.n	8002cfc <UART_SetConfig+0x210>
 8002ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd0:	d817      	bhi.n	8002d02 <UART_SetConfig+0x216>
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	d00b      	beq.n	8002cf0 <UART_SetConfig+0x204>
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cdc:	d811      	bhi.n	8002d02 <UART_SetConfig+0x216>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <UART_SetConfig+0x1fe>
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce6:	d006      	beq.n	8002cf6 <UART_SetConfig+0x20a>
 8002ce8:	e00b      	b.n	8002d02 <UART_SetConfig+0x216>
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e0a0      	b.n	8002e32 <UART_SetConfig+0x346>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e09d      	b.n	8002e32 <UART_SetConfig+0x346>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e09a      	b.n	8002e32 <UART_SetConfig+0x346>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e097      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d02:	2310      	movs	r3, #16
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e094      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	; (8002dd0 <UART_SetConfig+0x2e4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d125      	bne.n	8002d5e <UART_SetConfig+0x272>
 8002d12:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d20:	d017      	beq.n	8002d52 <UART_SetConfig+0x266>
 8002d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d26:	d817      	bhi.n	8002d58 <UART_SetConfig+0x26c>
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2c:	d00b      	beq.n	8002d46 <UART_SetConfig+0x25a>
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d811      	bhi.n	8002d58 <UART_SetConfig+0x26c>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <UART_SetConfig+0x254>
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d006      	beq.n	8002d4c <UART_SetConfig+0x260>
 8002d3e:	e00b      	b.n	8002d58 <UART_SetConfig+0x26c>
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e075      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d46:	2302      	movs	r3, #2
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e072      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e06f      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d52:	2308      	movs	r3, #8
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e06c      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e069      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <UART_SetConfig+0x2e8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d137      	bne.n	8002dd8 <UART_SetConfig+0x2ec>
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d76:	d017      	beq.n	8002da8 <UART_SetConfig+0x2bc>
 8002d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d7c:	d817      	bhi.n	8002dae <UART_SetConfig+0x2c2>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d82:	d00b      	beq.n	8002d9c <UART_SetConfig+0x2b0>
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d811      	bhi.n	8002dae <UART_SetConfig+0x2c2>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <UART_SetConfig+0x2aa>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d006      	beq.n	8002da2 <UART_SetConfig+0x2b6>
 8002d94:	e00b      	b.n	8002dae <UART_SetConfig+0x2c2>
 8002d96:	2300      	movs	r3, #0
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e04a      	b.n	8002e32 <UART_SetConfig+0x346>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e047      	b.n	8002e32 <UART_SetConfig+0x346>
 8002da2:	2304      	movs	r3, #4
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e044      	b.n	8002e32 <UART_SetConfig+0x346>
 8002da8:	2308      	movs	r3, #8
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e041      	b.n	8002e32 <UART_SetConfig+0x346>
 8002dae:	2310      	movs	r3, #16
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e03e      	b.n	8002e32 <UART_SetConfig+0x346>
 8002db4:	efff69f3 	.word	0xefff69f3
 8002db8:	40011000 	.word	0x40011000
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	40004400 	.word	0x40004400
 8002dc4:	40004800 	.word	0x40004800
 8002dc8:	40004c00 	.word	0x40004c00
 8002dcc:	40005000 	.word	0x40005000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	40007800 	.word	0x40007800
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a71      	ldr	r2, [pc, #452]	; (8002fa4 <UART_SetConfig+0x4b8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d125      	bne.n	8002e2e <UART_SetConfig+0x342>
 8002de2:	4b71      	ldr	r3, [pc, #452]	; (8002fa8 <UART_SetConfig+0x4bc>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df0:	d017      	beq.n	8002e22 <UART_SetConfig+0x336>
 8002df2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df6:	d817      	bhi.n	8002e28 <UART_SetConfig+0x33c>
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfc:	d00b      	beq.n	8002e16 <UART_SetConfig+0x32a>
 8002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e02:	d811      	bhi.n	8002e28 <UART_SetConfig+0x33c>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <UART_SetConfig+0x324>
 8002e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0c:	d006      	beq.n	8002e1c <UART_SetConfig+0x330>
 8002e0e:	e00b      	b.n	8002e28 <UART_SetConfig+0x33c>
 8002e10:	2300      	movs	r3, #0
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e00d      	b.n	8002e32 <UART_SetConfig+0x346>
 8002e16:	2302      	movs	r3, #2
 8002e18:	77fb      	strb	r3, [r7, #31]
 8002e1a:	e00a      	b.n	8002e32 <UART_SetConfig+0x346>
 8002e1c:	2304      	movs	r3, #4
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	e007      	b.n	8002e32 <UART_SetConfig+0x346>
 8002e22:	2308      	movs	r3, #8
 8002e24:	77fb      	strb	r3, [r7, #31]
 8002e26:	e004      	b.n	8002e32 <UART_SetConfig+0x346>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e001      	b.n	8002e32 <UART_SetConfig+0x346>
 8002e2e:	2310      	movs	r3, #16
 8002e30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3a:	d15b      	bne.n	8002ef4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	2b08      	cmp	r3, #8
 8002e40:	d827      	bhi.n	8002e92 <UART_SetConfig+0x3a6>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0x35c>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e6d 	.word	0x08002e6d
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	08002e7d 	.word	0x08002e7d
 8002e54:	08002e93 	.word	0x08002e93
 8002e58:	08002e83 	.word	0x08002e83
 8002e5c:	08002e93 	.word	0x08002e93
 8002e60:	08002e93 	.word	0x08002e93
 8002e64:	08002e93 	.word	0x08002e93
 8002e68:	08002e8b 	.word	0x08002e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e6c:	f7ff f90c 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8002e70:	61b8      	str	r0, [r7, #24]
        break;
 8002e72:	e013      	b.n	8002e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e74:	f7ff f91c 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002e78:	61b8      	str	r0, [r7, #24]
        break;
 8002e7a:	e00f      	b.n	8002e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e7c:	4b4b      	ldr	r3, [pc, #300]	; (8002fac <UART_SetConfig+0x4c0>)
 8002e7e:	61bb      	str	r3, [r7, #24]
        break;
 8002e80:	e00c      	b.n	8002e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e82:	f7ff f83f 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8002e86:	61b8      	str	r0, [r7, #24]
        break;
 8002e88:	e008      	b.n	8002e9c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e8e:	61bb      	str	r3, [r7, #24]
        break;
 8002e90:	e004      	b.n	8002e9c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	77bb      	strb	r3, [r7, #30]
        break;
 8002e9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d074      	beq.n	8002f8c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	005a      	lsls	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	441a      	add	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d916      	bls.n	8002eee <UART_SetConfig+0x402>
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec6:	d212      	bcs.n	8002eee <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	f023 030f 	bic.w	r3, r3, #15
 8002ed0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	89fb      	ldrh	r3, [r7, #14]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	89fa      	ldrh	r2, [r7, #14]
 8002eea:	60da      	str	r2, [r3, #12]
 8002eec:	e04e      	b.n	8002f8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77bb      	strb	r3, [r7, #30]
 8002ef2:	e04b      	b.n	8002f8c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d827      	bhi.n	8002f4a <UART_SetConfig+0x45e>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <UART_SetConfig+0x414>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f2d 	.word	0x08002f2d
 8002f08:	08002f35 	.word	0x08002f35
 8002f0c:	08002f4b 	.word	0x08002f4b
 8002f10:	08002f3b 	.word	0x08002f3b
 8002f14:	08002f4b 	.word	0x08002f4b
 8002f18:	08002f4b 	.word	0x08002f4b
 8002f1c:	08002f4b 	.word	0x08002f4b
 8002f20:	08002f43 	.word	0x08002f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7ff f8b0 	bl	8002088 <HAL_RCC_GetPCLK1Freq>
 8002f28:	61b8      	str	r0, [r7, #24]
        break;
 8002f2a:	e013      	b.n	8002f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f2c:	f7ff f8c0 	bl	80020b0 <HAL_RCC_GetPCLK2Freq>
 8002f30:	61b8      	str	r0, [r7, #24]
        break;
 8002f32:	e00f      	b.n	8002f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <UART_SetConfig+0x4c0>)
 8002f36:	61bb      	str	r3, [r7, #24]
        break;
 8002f38:	e00c      	b.n	8002f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3a:	f7fe ffe3 	bl	8001f04 <HAL_RCC_GetSysClockFreq>
 8002f3e:	61b8      	str	r0, [r7, #24]
        break;
 8002f40:	e008      	b.n	8002f54 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f46:	61bb      	str	r3, [r7, #24]
        break;
 8002f48:	e004      	b.n	8002f54 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	77bb      	strb	r3, [r7, #30]
        break;
 8002f52:	bf00      	nop
    }

    if (pclk != 0U)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d018      	beq.n	8002f8c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	085a      	lsrs	r2, r3, #1
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b0f      	cmp	r3, #15
 8002f74:	d908      	bls.n	8002f88 <UART_SetConfig+0x49c>
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d204      	bcs.n	8002f88 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	e001      	b.n	8002f8c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f98:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40007c00 	.word	0x40007c00
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	00f42400 	.word	0x00f42400

08002fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01a      	beq.n	80030c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ae:	d10a      	bne.n	80030c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
  }
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003104:	f7fd fe06 	bl	8000d14 <HAL_GetTick>
 8003108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b08      	cmp	r3, #8
 8003116:	d10e      	bne.n	8003136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f82d 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e023      	b.n	800317e <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d10e      	bne.n	8003162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f817 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e00d      	b.n	800317e <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003196:	e05e      	b.n	8003256 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d05a      	beq.n	8003256 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a0:	f7fd fdb8 	bl	8000d14 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d302      	bcc.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11b      	bne.n	80031ee <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e043      	b.n	8003276 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02c      	beq.n	8003256 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320a:	d124      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003214:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003224:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e00f      	b.n	8003276 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69da      	ldr	r2, [r3, #28]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4013      	ands	r3, r2
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	429a      	cmp	r2, r3
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	429a      	cmp	r2, r3
 8003272:	d091      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <__errno>:
 8003280:	4b01      	ldr	r3, [pc, #4]	; (8003288 <__errno+0x8>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	2000000c 	.word	0x2000000c

0800328c <__libc_init_array>:
 800328c:	b570      	push	{r4, r5, r6, lr}
 800328e:	4d0d      	ldr	r5, [pc, #52]	; (80032c4 <__libc_init_array+0x38>)
 8003290:	4c0d      	ldr	r4, [pc, #52]	; (80032c8 <__libc_init_array+0x3c>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	2600      	movs	r6, #0
 8003298:	42a6      	cmp	r6, r4
 800329a:	d109      	bne.n	80032b0 <__libc_init_array+0x24>
 800329c:	4d0b      	ldr	r5, [pc, #44]	; (80032cc <__libc_init_array+0x40>)
 800329e:	4c0c      	ldr	r4, [pc, #48]	; (80032d0 <__libc_init_array+0x44>)
 80032a0:	f000 fc4e 	bl	8003b40 <_init>
 80032a4:	1b64      	subs	r4, r4, r5
 80032a6:	10a4      	asrs	r4, r4, #2
 80032a8:	2600      	movs	r6, #0
 80032aa:	42a6      	cmp	r6, r4
 80032ac:	d105      	bne.n	80032ba <__libc_init_array+0x2e>
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b4:	4798      	blx	r3
 80032b6:	3601      	adds	r6, #1
 80032b8:	e7ee      	b.n	8003298 <__libc_init_array+0xc>
 80032ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80032be:	4798      	blx	r3
 80032c0:	3601      	adds	r6, #1
 80032c2:	e7f2      	b.n	80032aa <__libc_init_array+0x1e>
 80032c4:	08003bcc 	.word	0x08003bcc
 80032c8:	08003bcc 	.word	0x08003bcc
 80032cc:	08003bcc 	.word	0x08003bcc
 80032d0:	08003bd0 	.word	0x08003bd0

080032d4 <memset>:
 80032d4:	4402      	add	r2, r0
 80032d6:	4603      	mov	r3, r0
 80032d8:	4293      	cmp	r3, r2
 80032da:	d100      	bne.n	80032de <memset+0xa>
 80032dc:	4770      	bx	lr
 80032de:	f803 1b01 	strb.w	r1, [r3], #1
 80032e2:	e7f9      	b.n	80032d8 <memset+0x4>

080032e4 <siprintf>:
 80032e4:	b40e      	push	{r1, r2, r3}
 80032e6:	b500      	push	{lr}
 80032e8:	b09c      	sub	sp, #112	; 0x70
 80032ea:	ab1d      	add	r3, sp, #116	; 0x74
 80032ec:	9002      	str	r0, [sp, #8]
 80032ee:	9006      	str	r0, [sp, #24]
 80032f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032f4:	4809      	ldr	r0, [pc, #36]	; (800331c <siprintf+0x38>)
 80032f6:	9107      	str	r1, [sp, #28]
 80032f8:	9104      	str	r1, [sp, #16]
 80032fa:	4909      	ldr	r1, [pc, #36]	; (8003320 <siprintf+0x3c>)
 80032fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003300:	9105      	str	r1, [sp, #20]
 8003302:	6800      	ldr	r0, [r0, #0]
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	a902      	add	r1, sp, #8
 8003308:	f000 f868 	bl	80033dc <_svfiprintf_r>
 800330c:	9b02      	ldr	r3, [sp, #8]
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	b01c      	add	sp, #112	; 0x70
 8003314:	f85d eb04 	ldr.w	lr, [sp], #4
 8003318:	b003      	add	sp, #12
 800331a:	4770      	bx	lr
 800331c:	2000000c 	.word	0x2000000c
 8003320:	ffff0208 	.word	0xffff0208

08003324 <__ssputs_r>:
 8003324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003328:	688e      	ldr	r6, [r1, #8]
 800332a:	429e      	cmp	r6, r3
 800332c:	4682      	mov	sl, r0
 800332e:	460c      	mov	r4, r1
 8003330:	4690      	mov	r8, r2
 8003332:	461f      	mov	r7, r3
 8003334:	d838      	bhi.n	80033a8 <__ssputs_r+0x84>
 8003336:	898a      	ldrh	r2, [r1, #12]
 8003338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800333c:	d032      	beq.n	80033a4 <__ssputs_r+0x80>
 800333e:	6825      	ldr	r5, [r4, #0]
 8003340:	6909      	ldr	r1, [r1, #16]
 8003342:	eba5 0901 	sub.w	r9, r5, r1
 8003346:	6965      	ldr	r5, [r4, #20]
 8003348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800334c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003350:	3301      	adds	r3, #1
 8003352:	444b      	add	r3, r9
 8003354:	106d      	asrs	r5, r5, #1
 8003356:	429d      	cmp	r5, r3
 8003358:	bf38      	it	cc
 800335a:	461d      	movcc	r5, r3
 800335c:	0553      	lsls	r3, r2, #21
 800335e:	d531      	bpl.n	80033c4 <__ssputs_r+0xa0>
 8003360:	4629      	mov	r1, r5
 8003362:	f000 fb47 	bl	80039f4 <_malloc_r>
 8003366:	4606      	mov	r6, r0
 8003368:	b950      	cbnz	r0, 8003380 <__ssputs_r+0x5c>
 800336a:	230c      	movs	r3, #12
 800336c:	f8ca 3000 	str.w	r3, [sl]
 8003370:	89a3      	ldrh	r3, [r4, #12]
 8003372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003376:	81a3      	strh	r3, [r4, #12]
 8003378:	f04f 30ff 	mov.w	r0, #4294967295
 800337c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003380:	6921      	ldr	r1, [r4, #16]
 8003382:	464a      	mov	r2, r9
 8003384:	f000 fabe 	bl	8003904 <memcpy>
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800338e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	6126      	str	r6, [r4, #16]
 8003396:	6165      	str	r5, [r4, #20]
 8003398:	444e      	add	r6, r9
 800339a:	eba5 0509 	sub.w	r5, r5, r9
 800339e:	6026      	str	r6, [r4, #0]
 80033a0:	60a5      	str	r5, [r4, #8]
 80033a2:	463e      	mov	r6, r7
 80033a4:	42be      	cmp	r6, r7
 80033a6:	d900      	bls.n	80033aa <__ssputs_r+0x86>
 80033a8:	463e      	mov	r6, r7
 80033aa:	4632      	mov	r2, r6
 80033ac:	6820      	ldr	r0, [r4, #0]
 80033ae:	4641      	mov	r1, r8
 80033b0:	f000 fab6 	bl	8003920 <memmove>
 80033b4:	68a3      	ldr	r3, [r4, #8]
 80033b6:	6822      	ldr	r2, [r4, #0]
 80033b8:	1b9b      	subs	r3, r3, r6
 80033ba:	4432      	add	r2, r6
 80033bc:	60a3      	str	r3, [r4, #8]
 80033be:	6022      	str	r2, [r4, #0]
 80033c0:	2000      	movs	r0, #0
 80033c2:	e7db      	b.n	800337c <__ssputs_r+0x58>
 80033c4:	462a      	mov	r2, r5
 80033c6:	f000 fb6f 	bl	8003aa8 <_realloc_r>
 80033ca:	4606      	mov	r6, r0
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d1e1      	bne.n	8003394 <__ssputs_r+0x70>
 80033d0:	6921      	ldr	r1, [r4, #16]
 80033d2:	4650      	mov	r0, sl
 80033d4:	f000 fabe 	bl	8003954 <_free_r>
 80033d8:	e7c7      	b.n	800336a <__ssputs_r+0x46>
	...

080033dc <_svfiprintf_r>:
 80033dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033e0:	4698      	mov	r8, r3
 80033e2:	898b      	ldrh	r3, [r1, #12]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	b09d      	sub	sp, #116	; 0x74
 80033e8:	4607      	mov	r7, r0
 80033ea:	460d      	mov	r5, r1
 80033ec:	4614      	mov	r4, r2
 80033ee:	d50e      	bpl.n	800340e <_svfiprintf_r+0x32>
 80033f0:	690b      	ldr	r3, [r1, #16]
 80033f2:	b963      	cbnz	r3, 800340e <_svfiprintf_r+0x32>
 80033f4:	2140      	movs	r1, #64	; 0x40
 80033f6:	f000 fafd 	bl	80039f4 <_malloc_r>
 80033fa:	6028      	str	r0, [r5, #0]
 80033fc:	6128      	str	r0, [r5, #16]
 80033fe:	b920      	cbnz	r0, 800340a <_svfiprintf_r+0x2e>
 8003400:	230c      	movs	r3, #12
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e0d1      	b.n	80035ae <_svfiprintf_r+0x1d2>
 800340a:	2340      	movs	r3, #64	; 0x40
 800340c:	616b      	str	r3, [r5, #20]
 800340e:	2300      	movs	r3, #0
 8003410:	9309      	str	r3, [sp, #36]	; 0x24
 8003412:	2320      	movs	r3, #32
 8003414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003418:	f8cd 800c 	str.w	r8, [sp, #12]
 800341c:	2330      	movs	r3, #48	; 0x30
 800341e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035c8 <_svfiprintf_r+0x1ec>
 8003422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003426:	f04f 0901 	mov.w	r9, #1
 800342a:	4623      	mov	r3, r4
 800342c:	469a      	mov	sl, r3
 800342e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003432:	b10a      	cbz	r2, 8003438 <_svfiprintf_r+0x5c>
 8003434:	2a25      	cmp	r2, #37	; 0x25
 8003436:	d1f9      	bne.n	800342c <_svfiprintf_r+0x50>
 8003438:	ebba 0b04 	subs.w	fp, sl, r4
 800343c:	d00b      	beq.n	8003456 <_svfiprintf_r+0x7a>
 800343e:	465b      	mov	r3, fp
 8003440:	4622      	mov	r2, r4
 8003442:	4629      	mov	r1, r5
 8003444:	4638      	mov	r0, r7
 8003446:	f7ff ff6d 	bl	8003324 <__ssputs_r>
 800344a:	3001      	adds	r0, #1
 800344c:	f000 80aa 	beq.w	80035a4 <_svfiprintf_r+0x1c8>
 8003450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003452:	445a      	add	r2, fp
 8003454:	9209      	str	r2, [sp, #36]	; 0x24
 8003456:	f89a 3000 	ldrb.w	r3, [sl]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80a2 	beq.w	80035a4 <_svfiprintf_r+0x1c8>
 8003460:	2300      	movs	r3, #0
 8003462:	f04f 32ff 	mov.w	r2, #4294967295
 8003466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800346a:	f10a 0a01 	add.w	sl, sl, #1
 800346e:	9304      	str	r3, [sp, #16]
 8003470:	9307      	str	r3, [sp, #28]
 8003472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003476:	931a      	str	r3, [sp, #104]	; 0x68
 8003478:	4654      	mov	r4, sl
 800347a:	2205      	movs	r2, #5
 800347c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003480:	4851      	ldr	r0, [pc, #324]	; (80035c8 <_svfiprintf_r+0x1ec>)
 8003482:	f7fc fee5 	bl	8000250 <memchr>
 8003486:	9a04      	ldr	r2, [sp, #16]
 8003488:	b9d8      	cbnz	r0, 80034c2 <_svfiprintf_r+0xe6>
 800348a:	06d0      	lsls	r0, r2, #27
 800348c:	bf44      	itt	mi
 800348e:	2320      	movmi	r3, #32
 8003490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003494:	0711      	lsls	r1, r2, #28
 8003496:	bf44      	itt	mi
 8003498:	232b      	movmi	r3, #43	; 0x2b
 800349a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800349e:	f89a 3000 	ldrb.w	r3, [sl]
 80034a2:	2b2a      	cmp	r3, #42	; 0x2a
 80034a4:	d015      	beq.n	80034d2 <_svfiprintf_r+0xf6>
 80034a6:	9a07      	ldr	r2, [sp, #28]
 80034a8:	4654      	mov	r4, sl
 80034aa:	2000      	movs	r0, #0
 80034ac:	f04f 0c0a 	mov.w	ip, #10
 80034b0:	4621      	mov	r1, r4
 80034b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034b6:	3b30      	subs	r3, #48	; 0x30
 80034b8:	2b09      	cmp	r3, #9
 80034ba:	d94e      	bls.n	800355a <_svfiprintf_r+0x17e>
 80034bc:	b1b0      	cbz	r0, 80034ec <_svfiprintf_r+0x110>
 80034be:	9207      	str	r2, [sp, #28]
 80034c0:	e014      	b.n	80034ec <_svfiprintf_r+0x110>
 80034c2:	eba0 0308 	sub.w	r3, r0, r8
 80034c6:	fa09 f303 	lsl.w	r3, r9, r3
 80034ca:	4313      	orrs	r3, r2
 80034cc:	9304      	str	r3, [sp, #16]
 80034ce:	46a2      	mov	sl, r4
 80034d0:	e7d2      	b.n	8003478 <_svfiprintf_r+0x9c>
 80034d2:	9b03      	ldr	r3, [sp, #12]
 80034d4:	1d19      	adds	r1, r3, #4
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	9103      	str	r1, [sp, #12]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bfbb      	ittet	lt
 80034de:	425b      	neglt	r3, r3
 80034e0:	f042 0202 	orrlt.w	r2, r2, #2
 80034e4:	9307      	strge	r3, [sp, #28]
 80034e6:	9307      	strlt	r3, [sp, #28]
 80034e8:	bfb8      	it	lt
 80034ea:	9204      	strlt	r2, [sp, #16]
 80034ec:	7823      	ldrb	r3, [r4, #0]
 80034ee:	2b2e      	cmp	r3, #46	; 0x2e
 80034f0:	d10c      	bne.n	800350c <_svfiprintf_r+0x130>
 80034f2:	7863      	ldrb	r3, [r4, #1]
 80034f4:	2b2a      	cmp	r3, #42	; 0x2a
 80034f6:	d135      	bne.n	8003564 <_svfiprintf_r+0x188>
 80034f8:	9b03      	ldr	r3, [sp, #12]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	9203      	str	r2, [sp, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	bfb8      	it	lt
 8003504:	f04f 33ff 	movlt.w	r3, #4294967295
 8003508:	3402      	adds	r4, #2
 800350a:	9305      	str	r3, [sp, #20]
 800350c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035d8 <_svfiprintf_r+0x1fc>
 8003510:	7821      	ldrb	r1, [r4, #0]
 8003512:	2203      	movs	r2, #3
 8003514:	4650      	mov	r0, sl
 8003516:	f7fc fe9b 	bl	8000250 <memchr>
 800351a:	b140      	cbz	r0, 800352e <_svfiprintf_r+0x152>
 800351c:	2340      	movs	r3, #64	; 0x40
 800351e:	eba0 000a 	sub.w	r0, r0, sl
 8003522:	fa03 f000 	lsl.w	r0, r3, r0
 8003526:	9b04      	ldr	r3, [sp, #16]
 8003528:	4303      	orrs	r3, r0
 800352a:	3401      	adds	r4, #1
 800352c:	9304      	str	r3, [sp, #16]
 800352e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003532:	4826      	ldr	r0, [pc, #152]	; (80035cc <_svfiprintf_r+0x1f0>)
 8003534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003538:	2206      	movs	r2, #6
 800353a:	f7fc fe89 	bl	8000250 <memchr>
 800353e:	2800      	cmp	r0, #0
 8003540:	d038      	beq.n	80035b4 <_svfiprintf_r+0x1d8>
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <_svfiprintf_r+0x1f4>)
 8003544:	bb1b      	cbnz	r3, 800358e <_svfiprintf_r+0x1b2>
 8003546:	9b03      	ldr	r3, [sp, #12]
 8003548:	3307      	adds	r3, #7
 800354a:	f023 0307 	bic.w	r3, r3, #7
 800354e:	3308      	adds	r3, #8
 8003550:	9303      	str	r3, [sp, #12]
 8003552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003554:	4433      	add	r3, r6
 8003556:	9309      	str	r3, [sp, #36]	; 0x24
 8003558:	e767      	b.n	800342a <_svfiprintf_r+0x4e>
 800355a:	fb0c 3202 	mla	r2, ip, r2, r3
 800355e:	460c      	mov	r4, r1
 8003560:	2001      	movs	r0, #1
 8003562:	e7a5      	b.n	80034b0 <_svfiprintf_r+0xd4>
 8003564:	2300      	movs	r3, #0
 8003566:	3401      	adds	r4, #1
 8003568:	9305      	str	r3, [sp, #20]
 800356a:	4619      	mov	r1, r3
 800356c:	f04f 0c0a 	mov.w	ip, #10
 8003570:	4620      	mov	r0, r4
 8003572:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003576:	3a30      	subs	r2, #48	; 0x30
 8003578:	2a09      	cmp	r2, #9
 800357a:	d903      	bls.n	8003584 <_svfiprintf_r+0x1a8>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0c5      	beq.n	800350c <_svfiprintf_r+0x130>
 8003580:	9105      	str	r1, [sp, #20]
 8003582:	e7c3      	b.n	800350c <_svfiprintf_r+0x130>
 8003584:	fb0c 2101 	mla	r1, ip, r1, r2
 8003588:	4604      	mov	r4, r0
 800358a:	2301      	movs	r3, #1
 800358c:	e7f0      	b.n	8003570 <_svfiprintf_r+0x194>
 800358e:	ab03      	add	r3, sp, #12
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	462a      	mov	r2, r5
 8003594:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <_svfiprintf_r+0x1f8>)
 8003596:	a904      	add	r1, sp, #16
 8003598:	4638      	mov	r0, r7
 800359a:	f3af 8000 	nop.w
 800359e:	1c42      	adds	r2, r0, #1
 80035a0:	4606      	mov	r6, r0
 80035a2:	d1d6      	bne.n	8003552 <_svfiprintf_r+0x176>
 80035a4:	89ab      	ldrh	r3, [r5, #12]
 80035a6:	065b      	lsls	r3, r3, #25
 80035a8:	f53f af2c 	bmi.w	8003404 <_svfiprintf_r+0x28>
 80035ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035ae:	b01d      	add	sp, #116	; 0x74
 80035b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b4:	ab03      	add	r3, sp, #12
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	462a      	mov	r2, r5
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <_svfiprintf_r+0x1f8>)
 80035bc:	a904      	add	r1, sp, #16
 80035be:	4638      	mov	r0, r7
 80035c0:	f000 f87a 	bl	80036b8 <_printf_i>
 80035c4:	e7eb      	b.n	800359e <_svfiprintf_r+0x1c2>
 80035c6:	bf00      	nop
 80035c8:	08003b90 	.word	0x08003b90
 80035cc:	08003b9a 	.word	0x08003b9a
 80035d0:	00000000 	.word	0x00000000
 80035d4:	08003325 	.word	0x08003325
 80035d8:	08003b96 	.word	0x08003b96

080035dc <_printf_common>:
 80035dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e0:	4616      	mov	r6, r2
 80035e2:	4699      	mov	r9, r3
 80035e4:	688a      	ldr	r2, [r1, #8]
 80035e6:	690b      	ldr	r3, [r1, #16]
 80035e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035ec:	4293      	cmp	r3, r2
 80035ee:	bfb8      	it	lt
 80035f0:	4613      	movlt	r3, r2
 80035f2:	6033      	str	r3, [r6, #0]
 80035f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035f8:	4607      	mov	r7, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	b10a      	cbz	r2, 8003602 <_printf_common+0x26>
 80035fe:	3301      	adds	r3, #1
 8003600:	6033      	str	r3, [r6, #0]
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	0699      	lsls	r1, r3, #26
 8003606:	bf42      	ittt	mi
 8003608:	6833      	ldrmi	r3, [r6, #0]
 800360a:	3302      	addmi	r3, #2
 800360c:	6033      	strmi	r3, [r6, #0]
 800360e:	6825      	ldr	r5, [r4, #0]
 8003610:	f015 0506 	ands.w	r5, r5, #6
 8003614:	d106      	bne.n	8003624 <_printf_common+0x48>
 8003616:	f104 0a19 	add.w	sl, r4, #25
 800361a:	68e3      	ldr	r3, [r4, #12]
 800361c:	6832      	ldr	r2, [r6, #0]
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	42ab      	cmp	r3, r5
 8003622:	dc26      	bgt.n	8003672 <_printf_common+0x96>
 8003624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003628:	1e13      	subs	r3, r2, #0
 800362a:	6822      	ldr	r2, [r4, #0]
 800362c:	bf18      	it	ne
 800362e:	2301      	movne	r3, #1
 8003630:	0692      	lsls	r2, r2, #26
 8003632:	d42b      	bmi.n	800368c <_printf_common+0xb0>
 8003634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d01e      	beq.n	8003680 <_printf_common+0xa4>
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	68e5      	ldr	r5, [r4, #12]
 8003646:	6832      	ldr	r2, [r6, #0]
 8003648:	f003 0306 	and.w	r3, r3, #6
 800364c:	2b04      	cmp	r3, #4
 800364e:	bf08      	it	eq
 8003650:	1aad      	subeq	r5, r5, r2
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	6922      	ldr	r2, [r4, #16]
 8003656:	bf0c      	ite	eq
 8003658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800365c:	2500      	movne	r5, #0
 800365e:	4293      	cmp	r3, r2
 8003660:	bfc4      	itt	gt
 8003662:	1a9b      	subgt	r3, r3, r2
 8003664:	18ed      	addgt	r5, r5, r3
 8003666:	2600      	movs	r6, #0
 8003668:	341a      	adds	r4, #26
 800366a:	42b5      	cmp	r5, r6
 800366c:	d11a      	bne.n	80036a4 <_printf_common+0xc8>
 800366e:	2000      	movs	r0, #0
 8003670:	e008      	b.n	8003684 <_printf_common+0xa8>
 8003672:	2301      	movs	r3, #1
 8003674:	4652      	mov	r2, sl
 8003676:	4649      	mov	r1, r9
 8003678:	4638      	mov	r0, r7
 800367a:	47c0      	blx	r8
 800367c:	3001      	adds	r0, #1
 800367e:	d103      	bne.n	8003688 <_printf_common+0xac>
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003688:	3501      	adds	r5, #1
 800368a:	e7c6      	b.n	800361a <_printf_common+0x3e>
 800368c:	18e1      	adds	r1, r4, r3
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	2030      	movs	r0, #48	; 0x30
 8003692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003696:	4422      	add	r2, r4
 8003698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800369c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036a0:	3302      	adds	r3, #2
 80036a2:	e7c7      	b.n	8003634 <_printf_common+0x58>
 80036a4:	2301      	movs	r3, #1
 80036a6:	4622      	mov	r2, r4
 80036a8:	4649      	mov	r1, r9
 80036aa:	4638      	mov	r0, r7
 80036ac:	47c0      	blx	r8
 80036ae:	3001      	adds	r0, #1
 80036b0:	d0e6      	beq.n	8003680 <_printf_common+0xa4>
 80036b2:	3601      	adds	r6, #1
 80036b4:	e7d9      	b.n	800366a <_printf_common+0x8e>
	...

080036b8 <_printf_i>:
 80036b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036bc:	460c      	mov	r4, r1
 80036be:	4691      	mov	r9, r2
 80036c0:	7e27      	ldrb	r7, [r4, #24]
 80036c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036c4:	2f78      	cmp	r7, #120	; 0x78
 80036c6:	4680      	mov	r8, r0
 80036c8:	469a      	mov	sl, r3
 80036ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036ce:	d807      	bhi.n	80036e0 <_printf_i+0x28>
 80036d0:	2f62      	cmp	r7, #98	; 0x62
 80036d2:	d80a      	bhi.n	80036ea <_printf_i+0x32>
 80036d4:	2f00      	cmp	r7, #0
 80036d6:	f000 80d8 	beq.w	800388a <_printf_i+0x1d2>
 80036da:	2f58      	cmp	r7, #88	; 0x58
 80036dc:	f000 80a3 	beq.w	8003826 <_printf_i+0x16e>
 80036e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036e8:	e03a      	b.n	8003760 <_printf_i+0xa8>
 80036ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036ee:	2b15      	cmp	r3, #21
 80036f0:	d8f6      	bhi.n	80036e0 <_printf_i+0x28>
 80036f2:	a001      	add	r0, pc, #4	; (adr r0, 80036f8 <_printf_i+0x40>)
 80036f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80036f8:	08003751 	.word	0x08003751
 80036fc:	08003765 	.word	0x08003765
 8003700:	080036e1 	.word	0x080036e1
 8003704:	080036e1 	.word	0x080036e1
 8003708:	080036e1 	.word	0x080036e1
 800370c:	080036e1 	.word	0x080036e1
 8003710:	08003765 	.word	0x08003765
 8003714:	080036e1 	.word	0x080036e1
 8003718:	080036e1 	.word	0x080036e1
 800371c:	080036e1 	.word	0x080036e1
 8003720:	080036e1 	.word	0x080036e1
 8003724:	08003871 	.word	0x08003871
 8003728:	08003795 	.word	0x08003795
 800372c:	08003853 	.word	0x08003853
 8003730:	080036e1 	.word	0x080036e1
 8003734:	080036e1 	.word	0x080036e1
 8003738:	08003893 	.word	0x08003893
 800373c:	080036e1 	.word	0x080036e1
 8003740:	08003795 	.word	0x08003795
 8003744:	080036e1 	.word	0x080036e1
 8003748:	080036e1 	.word	0x080036e1
 800374c:	0800385b 	.word	0x0800385b
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	1d1a      	adds	r2, r3, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	600a      	str	r2, [r1, #0]
 8003758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800375c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003760:	2301      	movs	r3, #1
 8003762:	e0a3      	b.n	80038ac <_printf_i+0x1f4>
 8003764:	6825      	ldr	r5, [r4, #0]
 8003766:	6808      	ldr	r0, [r1, #0]
 8003768:	062e      	lsls	r6, r5, #24
 800376a:	f100 0304 	add.w	r3, r0, #4
 800376e:	d50a      	bpl.n	8003786 <_printf_i+0xce>
 8003770:	6805      	ldr	r5, [r0, #0]
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	2d00      	cmp	r5, #0
 8003776:	da03      	bge.n	8003780 <_printf_i+0xc8>
 8003778:	232d      	movs	r3, #45	; 0x2d
 800377a:	426d      	negs	r5, r5
 800377c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003780:	485e      	ldr	r0, [pc, #376]	; (80038fc <_printf_i+0x244>)
 8003782:	230a      	movs	r3, #10
 8003784:	e019      	b.n	80037ba <_printf_i+0x102>
 8003786:	f015 0f40 	tst.w	r5, #64	; 0x40
 800378a:	6805      	ldr	r5, [r0, #0]
 800378c:	600b      	str	r3, [r1, #0]
 800378e:	bf18      	it	ne
 8003790:	b22d      	sxthne	r5, r5
 8003792:	e7ef      	b.n	8003774 <_printf_i+0xbc>
 8003794:	680b      	ldr	r3, [r1, #0]
 8003796:	6825      	ldr	r5, [r4, #0]
 8003798:	1d18      	adds	r0, r3, #4
 800379a:	6008      	str	r0, [r1, #0]
 800379c:	0628      	lsls	r0, r5, #24
 800379e:	d501      	bpl.n	80037a4 <_printf_i+0xec>
 80037a0:	681d      	ldr	r5, [r3, #0]
 80037a2:	e002      	b.n	80037aa <_printf_i+0xf2>
 80037a4:	0669      	lsls	r1, r5, #25
 80037a6:	d5fb      	bpl.n	80037a0 <_printf_i+0xe8>
 80037a8:	881d      	ldrh	r5, [r3, #0]
 80037aa:	4854      	ldr	r0, [pc, #336]	; (80038fc <_printf_i+0x244>)
 80037ac:	2f6f      	cmp	r7, #111	; 0x6f
 80037ae:	bf0c      	ite	eq
 80037b0:	2308      	moveq	r3, #8
 80037b2:	230a      	movne	r3, #10
 80037b4:	2100      	movs	r1, #0
 80037b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037ba:	6866      	ldr	r6, [r4, #4]
 80037bc:	60a6      	str	r6, [r4, #8]
 80037be:	2e00      	cmp	r6, #0
 80037c0:	bfa2      	ittt	ge
 80037c2:	6821      	ldrge	r1, [r4, #0]
 80037c4:	f021 0104 	bicge.w	r1, r1, #4
 80037c8:	6021      	strge	r1, [r4, #0]
 80037ca:	b90d      	cbnz	r5, 80037d0 <_printf_i+0x118>
 80037cc:	2e00      	cmp	r6, #0
 80037ce:	d04d      	beq.n	800386c <_printf_i+0x1b4>
 80037d0:	4616      	mov	r6, r2
 80037d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80037d6:	fb03 5711 	mls	r7, r3, r1, r5
 80037da:	5dc7      	ldrb	r7, [r0, r7]
 80037dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037e0:	462f      	mov	r7, r5
 80037e2:	42bb      	cmp	r3, r7
 80037e4:	460d      	mov	r5, r1
 80037e6:	d9f4      	bls.n	80037d2 <_printf_i+0x11a>
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d10b      	bne.n	8003804 <_printf_i+0x14c>
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	07df      	lsls	r7, r3, #31
 80037f0:	d508      	bpl.n	8003804 <_printf_i+0x14c>
 80037f2:	6923      	ldr	r3, [r4, #16]
 80037f4:	6861      	ldr	r1, [r4, #4]
 80037f6:	4299      	cmp	r1, r3
 80037f8:	bfde      	ittt	le
 80037fa:	2330      	movle	r3, #48	; 0x30
 80037fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003800:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003804:	1b92      	subs	r2, r2, r6
 8003806:	6122      	str	r2, [r4, #16]
 8003808:	f8cd a000 	str.w	sl, [sp]
 800380c:	464b      	mov	r3, r9
 800380e:	aa03      	add	r2, sp, #12
 8003810:	4621      	mov	r1, r4
 8003812:	4640      	mov	r0, r8
 8003814:	f7ff fee2 	bl	80035dc <_printf_common>
 8003818:	3001      	adds	r0, #1
 800381a:	d14c      	bne.n	80038b6 <_printf_i+0x1fe>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	b004      	add	sp, #16
 8003822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003826:	4835      	ldr	r0, [pc, #212]	; (80038fc <_printf_i+0x244>)
 8003828:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	680e      	ldr	r6, [r1, #0]
 8003830:	061f      	lsls	r7, r3, #24
 8003832:	f856 5b04 	ldr.w	r5, [r6], #4
 8003836:	600e      	str	r6, [r1, #0]
 8003838:	d514      	bpl.n	8003864 <_printf_i+0x1ac>
 800383a:	07d9      	lsls	r1, r3, #31
 800383c:	bf44      	itt	mi
 800383e:	f043 0320 	orrmi.w	r3, r3, #32
 8003842:	6023      	strmi	r3, [r4, #0]
 8003844:	b91d      	cbnz	r5, 800384e <_printf_i+0x196>
 8003846:	6823      	ldr	r3, [r4, #0]
 8003848:	f023 0320 	bic.w	r3, r3, #32
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	2310      	movs	r3, #16
 8003850:	e7b0      	b.n	80037b4 <_printf_i+0xfc>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	f043 0320 	orr.w	r3, r3, #32
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	2378      	movs	r3, #120	; 0x78
 800385c:	4828      	ldr	r0, [pc, #160]	; (8003900 <_printf_i+0x248>)
 800385e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003862:	e7e3      	b.n	800382c <_printf_i+0x174>
 8003864:	065e      	lsls	r6, r3, #25
 8003866:	bf48      	it	mi
 8003868:	b2ad      	uxthmi	r5, r5
 800386a:	e7e6      	b.n	800383a <_printf_i+0x182>
 800386c:	4616      	mov	r6, r2
 800386e:	e7bb      	b.n	80037e8 <_printf_i+0x130>
 8003870:	680b      	ldr	r3, [r1, #0]
 8003872:	6826      	ldr	r6, [r4, #0]
 8003874:	6960      	ldr	r0, [r4, #20]
 8003876:	1d1d      	adds	r5, r3, #4
 8003878:	600d      	str	r5, [r1, #0]
 800387a:	0635      	lsls	r5, r6, #24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	d501      	bpl.n	8003884 <_printf_i+0x1cc>
 8003880:	6018      	str	r0, [r3, #0]
 8003882:	e002      	b.n	800388a <_printf_i+0x1d2>
 8003884:	0671      	lsls	r1, r6, #25
 8003886:	d5fb      	bpl.n	8003880 <_printf_i+0x1c8>
 8003888:	8018      	strh	r0, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	6123      	str	r3, [r4, #16]
 800388e:	4616      	mov	r6, r2
 8003890:	e7ba      	b.n	8003808 <_printf_i+0x150>
 8003892:	680b      	ldr	r3, [r1, #0]
 8003894:	1d1a      	adds	r2, r3, #4
 8003896:	600a      	str	r2, [r1, #0]
 8003898:	681e      	ldr	r6, [r3, #0]
 800389a:	6862      	ldr	r2, [r4, #4]
 800389c:	2100      	movs	r1, #0
 800389e:	4630      	mov	r0, r6
 80038a0:	f7fc fcd6 	bl	8000250 <memchr>
 80038a4:	b108      	cbz	r0, 80038aa <_printf_i+0x1f2>
 80038a6:	1b80      	subs	r0, r0, r6
 80038a8:	6060      	str	r0, [r4, #4]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6123      	str	r3, [r4, #16]
 80038ae:	2300      	movs	r3, #0
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b4:	e7a8      	b.n	8003808 <_printf_i+0x150>
 80038b6:	6923      	ldr	r3, [r4, #16]
 80038b8:	4632      	mov	r2, r6
 80038ba:	4649      	mov	r1, r9
 80038bc:	4640      	mov	r0, r8
 80038be:	47d0      	blx	sl
 80038c0:	3001      	adds	r0, #1
 80038c2:	d0ab      	beq.n	800381c <_printf_i+0x164>
 80038c4:	6823      	ldr	r3, [r4, #0]
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d413      	bmi.n	80038f2 <_printf_i+0x23a>
 80038ca:	68e0      	ldr	r0, [r4, #12]
 80038cc:	9b03      	ldr	r3, [sp, #12]
 80038ce:	4298      	cmp	r0, r3
 80038d0:	bfb8      	it	lt
 80038d2:	4618      	movlt	r0, r3
 80038d4:	e7a4      	b.n	8003820 <_printf_i+0x168>
 80038d6:	2301      	movs	r3, #1
 80038d8:	4632      	mov	r2, r6
 80038da:	4649      	mov	r1, r9
 80038dc:	4640      	mov	r0, r8
 80038de:	47d0      	blx	sl
 80038e0:	3001      	adds	r0, #1
 80038e2:	d09b      	beq.n	800381c <_printf_i+0x164>
 80038e4:	3501      	adds	r5, #1
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	9903      	ldr	r1, [sp, #12]
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	dcf2      	bgt.n	80038d6 <_printf_i+0x21e>
 80038f0:	e7eb      	b.n	80038ca <_printf_i+0x212>
 80038f2:	2500      	movs	r5, #0
 80038f4:	f104 0619 	add.w	r6, r4, #25
 80038f8:	e7f5      	b.n	80038e6 <_printf_i+0x22e>
 80038fa:	bf00      	nop
 80038fc:	08003ba1 	.word	0x08003ba1
 8003900:	08003bb2 	.word	0x08003bb2

08003904 <memcpy>:
 8003904:	440a      	add	r2, r1
 8003906:	4291      	cmp	r1, r2
 8003908:	f100 33ff 	add.w	r3, r0, #4294967295
 800390c:	d100      	bne.n	8003910 <memcpy+0xc>
 800390e:	4770      	bx	lr
 8003910:	b510      	push	{r4, lr}
 8003912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800391a:	4291      	cmp	r1, r2
 800391c:	d1f9      	bne.n	8003912 <memcpy+0xe>
 800391e:	bd10      	pop	{r4, pc}

08003920 <memmove>:
 8003920:	4288      	cmp	r0, r1
 8003922:	b510      	push	{r4, lr}
 8003924:	eb01 0402 	add.w	r4, r1, r2
 8003928:	d902      	bls.n	8003930 <memmove+0x10>
 800392a:	4284      	cmp	r4, r0
 800392c:	4623      	mov	r3, r4
 800392e:	d807      	bhi.n	8003940 <memmove+0x20>
 8003930:	1e43      	subs	r3, r0, #1
 8003932:	42a1      	cmp	r1, r4
 8003934:	d008      	beq.n	8003948 <memmove+0x28>
 8003936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800393a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800393e:	e7f8      	b.n	8003932 <memmove+0x12>
 8003940:	4402      	add	r2, r0
 8003942:	4601      	mov	r1, r0
 8003944:	428a      	cmp	r2, r1
 8003946:	d100      	bne.n	800394a <memmove+0x2a>
 8003948:	bd10      	pop	{r4, pc}
 800394a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800394e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003952:	e7f7      	b.n	8003944 <memmove+0x24>

08003954 <_free_r>:
 8003954:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003956:	2900      	cmp	r1, #0
 8003958:	d048      	beq.n	80039ec <_free_r+0x98>
 800395a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800395e:	9001      	str	r0, [sp, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f1a1 0404 	sub.w	r4, r1, #4
 8003966:	bfb8      	it	lt
 8003968:	18e4      	addlt	r4, r4, r3
 800396a:	f000 f8d3 	bl	8003b14 <__malloc_lock>
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <_free_r+0x9c>)
 8003970:	9801      	ldr	r0, [sp, #4]
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	4615      	mov	r5, r2
 8003976:	b933      	cbnz	r3, 8003986 <_free_r+0x32>
 8003978:	6063      	str	r3, [r4, #4]
 800397a:	6014      	str	r4, [r2, #0]
 800397c:	b003      	add	sp, #12
 800397e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003982:	f000 b8cd 	b.w	8003b20 <__malloc_unlock>
 8003986:	42a3      	cmp	r3, r4
 8003988:	d90b      	bls.n	80039a2 <_free_r+0x4e>
 800398a:	6821      	ldr	r1, [r4, #0]
 800398c:	1862      	adds	r2, r4, r1
 800398e:	4293      	cmp	r3, r2
 8003990:	bf04      	itt	eq
 8003992:	681a      	ldreq	r2, [r3, #0]
 8003994:	685b      	ldreq	r3, [r3, #4]
 8003996:	6063      	str	r3, [r4, #4]
 8003998:	bf04      	itt	eq
 800399a:	1852      	addeq	r2, r2, r1
 800399c:	6022      	streq	r2, [r4, #0]
 800399e:	602c      	str	r4, [r5, #0]
 80039a0:	e7ec      	b.n	800397c <_free_r+0x28>
 80039a2:	461a      	mov	r2, r3
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b10b      	cbz	r3, 80039ac <_free_r+0x58>
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d9fa      	bls.n	80039a2 <_free_r+0x4e>
 80039ac:	6811      	ldr	r1, [r2, #0]
 80039ae:	1855      	adds	r5, r2, r1
 80039b0:	42a5      	cmp	r5, r4
 80039b2:	d10b      	bne.n	80039cc <_free_r+0x78>
 80039b4:	6824      	ldr	r4, [r4, #0]
 80039b6:	4421      	add	r1, r4
 80039b8:	1854      	adds	r4, r2, r1
 80039ba:	42a3      	cmp	r3, r4
 80039bc:	6011      	str	r1, [r2, #0]
 80039be:	d1dd      	bne.n	800397c <_free_r+0x28>
 80039c0:	681c      	ldr	r4, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	6053      	str	r3, [r2, #4]
 80039c6:	4421      	add	r1, r4
 80039c8:	6011      	str	r1, [r2, #0]
 80039ca:	e7d7      	b.n	800397c <_free_r+0x28>
 80039cc:	d902      	bls.n	80039d4 <_free_r+0x80>
 80039ce:	230c      	movs	r3, #12
 80039d0:	6003      	str	r3, [r0, #0]
 80039d2:	e7d3      	b.n	800397c <_free_r+0x28>
 80039d4:	6825      	ldr	r5, [r4, #0]
 80039d6:	1961      	adds	r1, r4, r5
 80039d8:	428b      	cmp	r3, r1
 80039da:	bf04      	itt	eq
 80039dc:	6819      	ldreq	r1, [r3, #0]
 80039de:	685b      	ldreq	r3, [r3, #4]
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	bf04      	itt	eq
 80039e4:	1949      	addeq	r1, r1, r5
 80039e6:	6021      	streq	r1, [r4, #0]
 80039e8:	6054      	str	r4, [r2, #4]
 80039ea:	e7c7      	b.n	800397c <_free_r+0x28>
 80039ec:	b003      	add	sp, #12
 80039ee:	bd30      	pop	{r4, r5, pc}
 80039f0:	20000094 	.word	0x20000094

080039f4 <_malloc_r>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	1ccd      	adds	r5, r1, #3
 80039f8:	f025 0503 	bic.w	r5, r5, #3
 80039fc:	3508      	adds	r5, #8
 80039fe:	2d0c      	cmp	r5, #12
 8003a00:	bf38      	it	cc
 8003a02:	250c      	movcc	r5, #12
 8003a04:	2d00      	cmp	r5, #0
 8003a06:	4606      	mov	r6, r0
 8003a08:	db01      	blt.n	8003a0e <_malloc_r+0x1a>
 8003a0a:	42a9      	cmp	r1, r5
 8003a0c:	d903      	bls.n	8003a16 <_malloc_r+0x22>
 8003a0e:	230c      	movs	r3, #12
 8003a10:	6033      	str	r3, [r6, #0]
 8003a12:	2000      	movs	r0, #0
 8003a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a16:	f000 f87d 	bl	8003b14 <__malloc_lock>
 8003a1a:	4921      	ldr	r1, [pc, #132]	; (8003aa0 <_malloc_r+0xac>)
 8003a1c:	680a      	ldr	r2, [r1, #0]
 8003a1e:	4614      	mov	r4, r2
 8003a20:	b99c      	cbnz	r4, 8003a4a <_malloc_r+0x56>
 8003a22:	4f20      	ldr	r7, [pc, #128]	; (8003aa4 <_malloc_r+0xb0>)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	b923      	cbnz	r3, 8003a32 <_malloc_r+0x3e>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4630      	mov	r0, r6
 8003a2c:	f000 f862 	bl	8003af4 <_sbrk_r>
 8003a30:	6038      	str	r0, [r7, #0]
 8003a32:	4629      	mov	r1, r5
 8003a34:	4630      	mov	r0, r6
 8003a36:	f000 f85d 	bl	8003af4 <_sbrk_r>
 8003a3a:	1c43      	adds	r3, r0, #1
 8003a3c:	d123      	bne.n	8003a86 <_malloc_r+0x92>
 8003a3e:	230c      	movs	r3, #12
 8003a40:	6033      	str	r3, [r6, #0]
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 f86c 	bl	8003b20 <__malloc_unlock>
 8003a48:	e7e3      	b.n	8003a12 <_malloc_r+0x1e>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	1b5b      	subs	r3, r3, r5
 8003a4e:	d417      	bmi.n	8003a80 <_malloc_r+0x8c>
 8003a50:	2b0b      	cmp	r3, #11
 8003a52:	d903      	bls.n	8003a5c <_malloc_r+0x68>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	441c      	add	r4, r3
 8003a58:	6025      	str	r5, [r4, #0]
 8003a5a:	e004      	b.n	8003a66 <_malloc_r+0x72>
 8003a5c:	6863      	ldr	r3, [r4, #4]
 8003a5e:	42a2      	cmp	r2, r4
 8003a60:	bf0c      	ite	eq
 8003a62:	600b      	streq	r3, [r1, #0]
 8003a64:	6053      	strne	r3, [r2, #4]
 8003a66:	4630      	mov	r0, r6
 8003a68:	f000 f85a 	bl	8003b20 <__malloc_unlock>
 8003a6c:	f104 000b 	add.w	r0, r4, #11
 8003a70:	1d23      	adds	r3, r4, #4
 8003a72:	f020 0007 	bic.w	r0, r0, #7
 8003a76:	1ac2      	subs	r2, r0, r3
 8003a78:	d0cc      	beq.n	8003a14 <_malloc_r+0x20>
 8003a7a:	1a1b      	subs	r3, r3, r0
 8003a7c:	50a3      	str	r3, [r4, r2]
 8003a7e:	e7c9      	b.n	8003a14 <_malloc_r+0x20>
 8003a80:	4622      	mov	r2, r4
 8003a82:	6864      	ldr	r4, [r4, #4]
 8003a84:	e7cc      	b.n	8003a20 <_malloc_r+0x2c>
 8003a86:	1cc4      	adds	r4, r0, #3
 8003a88:	f024 0403 	bic.w	r4, r4, #3
 8003a8c:	42a0      	cmp	r0, r4
 8003a8e:	d0e3      	beq.n	8003a58 <_malloc_r+0x64>
 8003a90:	1a21      	subs	r1, r4, r0
 8003a92:	4630      	mov	r0, r6
 8003a94:	f000 f82e 	bl	8003af4 <_sbrk_r>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d1dd      	bne.n	8003a58 <_malloc_r+0x64>
 8003a9c:	e7cf      	b.n	8003a3e <_malloc_r+0x4a>
 8003a9e:	bf00      	nop
 8003aa0:	20000094 	.word	0x20000094
 8003aa4:	20000098 	.word	0x20000098

08003aa8 <_realloc_r>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	4607      	mov	r7, r0
 8003aac:	4614      	mov	r4, r2
 8003aae:	460e      	mov	r6, r1
 8003ab0:	b921      	cbnz	r1, 8003abc <_realloc_r+0x14>
 8003ab2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	f7ff bf9c 	b.w	80039f4 <_malloc_r>
 8003abc:	b922      	cbnz	r2, 8003ac8 <_realloc_r+0x20>
 8003abe:	f7ff ff49 	bl	8003954 <_free_r>
 8003ac2:	4625      	mov	r5, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ac8:	f000 f830 	bl	8003b2c <_malloc_usable_size_r>
 8003acc:	42a0      	cmp	r0, r4
 8003ace:	d20f      	bcs.n	8003af0 <_realloc_r+0x48>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4638      	mov	r0, r7
 8003ad4:	f7ff ff8e 	bl	80039f4 <_malloc_r>
 8003ad8:	4605      	mov	r5, r0
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d0f2      	beq.n	8003ac4 <_realloc_r+0x1c>
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4622      	mov	r2, r4
 8003ae2:	f7ff ff0f 	bl	8003904 <memcpy>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4638      	mov	r0, r7
 8003aea:	f7ff ff33 	bl	8003954 <_free_r>
 8003aee:	e7e9      	b.n	8003ac4 <_realloc_r+0x1c>
 8003af0:	4635      	mov	r5, r6
 8003af2:	e7e7      	b.n	8003ac4 <_realloc_r+0x1c>

08003af4 <_sbrk_r>:
 8003af4:	b538      	push	{r3, r4, r5, lr}
 8003af6:	4d06      	ldr	r5, [pc, #24]	; (8003b10 <_sbrk_r+0x1c>)
 8003af8:	2300      	movs	r3, #0
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fd f846 	bl	8000b90 <_sbrk>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d102      	bne.n	8003b0e <_sbrk_r+0x1a>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	b103      	cbz	r3, 8003b0e <_sbrk_r+0x1a>
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	2000014c 	.word	0x2000014c

08003b14 <__malloc_lock>:
 8003b14:	4801      	ldr	r0, [pc, #4]	; (8003b1c <__malloc_lock+0x8>)
 8003b16:	f000 b811 	b.w	8003b3c <__retarget_lock_acquire_recursive>
 8003b1a:	bf00      	nop
 8003b1c:	20000154 	.word	0x20000154

08003b20 <__malloc_unlock>:
 8003b20:	4801      	ldr	r0, [pc, #4]	; (8003b28 <__malloc_unlock+0x8>)
 8003b22:	f000 b80c 	b.w	8003b3e <__retarget_lock_release_recursive>
 8003b26:	bf00      	nop
 8003b28:	20000154 	.word	0x20000154

08003b2c <_malloc_usable_size_r>:
 8003b2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b30:	1f18      	subs	r0, r3, #4
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bfbc      	itt	lt
 8003b36:	580b      	ldrlt	r3, [r1, r0]
 8003b38:	18c0      	addlt	r0, r0, r3
 8003b3a:	4770      	bx	lr

08003b3c <__retarget_lock_acquire_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_release_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <_init>:
 8003b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b42:	bf00      	nop
 8003b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b46:	bc08      	pop	{r3}
 8003b48:	469e      	mov	lr, r3
 8003b4a:	4770      	bx	lr

08003b4c <_fini>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr
