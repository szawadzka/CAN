
CAN_v01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003970  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bdc  08003bdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be4  08003be4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003bec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08003c5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003c5c  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a511  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001915  00000000  00000000  0002a5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002710d  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009529  00000000  00000000  00053f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f34c1  00000000  00000000  0005d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b0  00000000  00000000  001509dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003b58 	.word	0x08003b58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003b58 	.word	0x08003b58

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ec:	f000 fb4d 	bl	8000c8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f0:	f000 f81c 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f4:	f000 f90a 	bl	800080c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f8d8 	bl	80007ac <MX_USART3_UART_Init>
  MX_CAN1_Init();
 80005fc:	f000 f890 	bl	8000720 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN1_Tx();
 8000600:	f000 f990 	bl	8000924 <CAN1_Tx>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 if(button=1){
 8000604:	4b07      	ldr	r3, [pc, #28]	; (8000624 <main+0x3c>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
		 HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 fb99 	bl	8000d44 <HAL_Delay>
		 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x40>)
 8000618:	f001 f8b4 	bl	8001784 <HAL_GPIO_WritePin>
		 button=0;
 800061c:	4b01      	ldr	r3, [pc, #4]	; (8000624 <main+0x3c>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
	 if(button=1){
 8000622:	e7ef      	b.n	8000604 <main+0x1c>
 8000624:	2000008c 	.word	0x2000008c
 8000628:	40020400 	.word	0x40020400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b0b8      	sub	sp, #224	; 0xe0
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000636:	2234      	movs	r2, #52	; 0x34
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fe56 	bl	80032ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2290      	movs	r2, #144	; 0x90
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fe47 	bl	80032ec <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b2e      	ldr	r3, [pc, #184]	; (8000718 <SystemClock_Config+0xec>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a2d      	ldr	r2, [pc, #180]	; (8000718 <SystemClock_Config+0xec>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <SystemClock_Config+0xec>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000676:	4b29      	ldr	r3, [pc, #164]	; (800071c <SystemClock_Config+0xf0>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067e:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xf0>)
 8000680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000684:	6013      	str	r3, [r2, #0]
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xf0>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2310      	movs	r3, #16
 80006a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 f89a 	bl	80017e8 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x92>
  {
    Error_Handler();
 80006ba:	f000 f97f 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 fb2e 	bl	8001d44 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ee:	f000 f965 	bl	80009bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fcf5 	bl	80020f0 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800070c:	f000 f956 	bl	80009bc <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	37e0      	adds	r7, #224	; 0xe0
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000726:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <MX_CAN1_Init+0x88>)
 8000728:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_CAN1_Init+0x84>)
 800072c:	2210      	movs	r2, #16
 800072e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_CAN1_Init+0x84>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_CAN1_Init+0x84>)
 800074a:	2200      	movs	r2, #0
 800074c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000750:	2200      	movs	r2, #0
 8000752:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000756:	2200      	movs	r2, #0
 8000758:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_CAN1_Init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000762:	2200      	movs	r2, #0
 8000764:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000768:	2200      	movs	r2, #0
 800076a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_CAN1_Init+0x84>)
 800076e:	f000 fb0d 	bl	8000d8c <HAL_CAN_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 f920 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  hcan1.Init.Prescaler = 100;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_CAN1_Init+0x84>)
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000788:	609a      	str	r2, [r3, #8]
  hcan1.Init.AutoRetransmission = ENABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_CAN1_Init+0x84>)
 800078c:	2201      	movs	r2, #1
 800078e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <MX_CAN1_Init+0x84>)
 8000792:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000796:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000798:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <MX_CAN1_Init+0x84>)
 800079a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800079e:	615a      	str	r2, [r3, #20]

  /* USER CODE END CAN1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000120 	.word	0x20000120
 80007a8:	40006400 	.word	0x40006400

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART3_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART3_UART_Init+0x58>)
 80007f0:	f002 f8a6 	bl	8002940 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f8df 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000009c 	.word	0x2000009c
 8000808:	40004800 	.word	0x40004800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2d      	ldr	r2, [pc, #180]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_GPIO_Init+0xd0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a27      	ldr	r2, [pc, #156]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a21      	ldr	r2, [pc, #132]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	2101      	movs	r1, #1
 8000886:	4816      	ldr	r0, [pc, #88]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000888:	f000 ff7c 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_GPIO_Init+0xd8>)
 8000894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4811      	ldr	r0, [pc, #68]	; (80008e8 <MX_GPIO_Init+0xdc>)
 80008a2:	f000 fdc3 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_GPIO_Init+0xd4>)
 80008be:	f000 fdb5 	bl	800142c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2028      	movs	r0, #40	; 0x28
 80008c8:	f000 fd79 	bl	80013be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008cc:	2028      	movs	r0, #40	; 0x28
 80008ce:	f000 fd92 	bl	80013f6 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020400 	.word	0x40020400
 80008e4:	10210000 	.word	0x10210000
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin){
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008fc:	d109      	bne.n	8000912 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2101      	movs	r1, #1
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <HAL_GPIO_EXTI_Callback+0x30>)
 8000904:	f000 ff3e 	bl	8001784 <HAL_GPIO_WritePin>
		CAN1_Tx();
 8000908:	f000 f80c 	bl	8000924 <CAN1_Tx>
		button=1;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_GPIO_EXTI_Callback+0x34>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
	}
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40020400 	.word	0x40020400
 8000920:	2000008c 	.word	0x2000008c

08000924 <CAN1_Tx>:
void CAN1_Tx(void){
 8000924:	b580      	push	{r7, lr}
 8000926:	b096      	sub	sp, #88	; 0x58
 8000928:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t our_message[5]={'H','E','L','L','O'};
 800092a:	4a20      	ldr	r2, [pc, #128]	; (80009ac <CAN1_Tx+0x88>)
 800092c:	463b      	mov	r3, r7
 800092e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000932:	6018      	str	r0, [r3, #0]
 8000934:	3304      	adds	r3, #4
 8000936:	7019      	strb	r1, [r3, #0]
	HAL_CAN_Start(&hcan1);
 8000938:	481d      	ldr	r0, [pc, #116]	; (80009b0 <CAN1_Tx+0x8c>)
 800093a:	f000 fb22 	bl	8000f82 <HAL_CAN_Start>
	TxHeader.DLC = 5;
 800093e:	2305      	movs	r3, #5
 8000940:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x65D;
 8000942:	f240 635d 	movw	r3, #1629	; 0x65d
 8000946:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]

	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, our_message, &TxMailbox)!=HAL_OK){
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	463a      	mov	r2, r7
 8000956:	f107 010c 	add.w	r1, r7, #12
 800095a:	4815      	ldr	r0, [pc, #84]	; (80009b0 <CAN1_Tx+0x8c>)
 800095c:	f000 fb55 	bl	800100a <HAL_CAN_AddTxMessage>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <CAN1_Tx+0x46>

		Error_Handler();
 8000966:	f000 f829 	bl	80009bc <Error_Handler>
	}

	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 800096a:	bf00      	nop
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	4619      	mov	r1, r3
 8000970:	480f      	ldr	r0, [pc, #60]	; (80009b0 <CAN1_Tx+0x8c>)
 8000972:	f000 fc25 	bl	80011c0 <HAL_CAN_IsTxMessagePending>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1f7      	bne.n	800096c <CAN1_Tx+0x48>

	sprintf(msg,"Message Transmitted\r\n");
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <CAN1_Tx+0x90>)
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fcba 	bl	80032fc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc57 	bl	8000240 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800099a:	f04f 33ff 	mov.w	r3, #4294967295
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <CAN1_Tx+0x94>)
 80009a0:	f002 f81c 	bl	80029dc <HAL_UART_Transmit>

}
 80009a4:	bf00      	nop
 80009a6:	3758      	adds	r7, #88	; 0x58
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08003b88 	.word	0x08003b88
 80009b0:	20000120 	.word	0x20000120
 80009b4:	08003b70 	.word	0x08003b70
 80009b8:	2000009c 	.word	0x2000009c

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>
	...

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x44>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x44>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_MspInit+0x44>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_MspInit+0x44>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_MspInit+0x44>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <HAL_CAN_MspInit+0xa0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d139      	bne.n	8000aa6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a1f      	ldr	r2, [pc, #124]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <HAL_CAN_MspInit+0xa4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a70:	2303      	movs	r3, #3
 8000a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a74:	2309      	movs	r3, #9
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <HAL_CAN_MspInit+0xa8>)
 8000a80:	f000 fcd4 	bl	800142c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a96:	2309      	movs	r3, #9
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_CAN_MspInit+0xa8>)
 8000aa2:	f000 fcc3 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40006400 	.word	0x40006400
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x7c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d128      	bne.n	8000b30 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_UART_MspInit+0x80>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b20:	2307      	movs	r3, #7
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <HAL_UART_MspInit+0x84>)
 8000b2c:	f000 fc7e 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004800 	.word	0x40004800
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020c00 	.word	0x40020c00

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f8b8 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ba0:	f000 fe0a 	bl	80017b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f002 fb5e 	bl	8003298 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20080000 	.word	0x20080000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000090 	.word	0x20000090
 8000c10:	20000160 	.word	0x20000160

08000c14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fb1d 	bl	80032a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fcbd 	bl	80005e8 <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c7c:	08003bec 	.word	0x08003bec
  ldr r2, =_sbss
 8000c80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c84:	2000015c 	.word	0x2000015c

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>

08000c8a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f000 fb8a 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c94:	200f      	movs	r0, #15
 8000c96:	f000 f805 	bl	8000ca4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c9a:	f7ff fe95 	bl	80009c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fba5 	bl	8001412 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 fb6d 	bl	80013be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000004 	.word	0x20000004

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000148 	.word	0x20000148

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000148 	.word	0x20000148

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d101      	bne.n	8000d9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e0ed      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fe30 	bl	8000a10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0202 	bic.w	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ffb4 	bl	8000d2c <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ffb0 	bl	8000d2c <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0c5      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0201 	orr.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e0c:	f7ff ff8e 	bl	8000d2c <HAL_GetTick>
 8000e10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e12:	e012      	b.n	8000e3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e14:	f7ff ff8a 	bl	8000d2c <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	d90b      	bls.n	8000e3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2205      	movs	r2, #5
 8000e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e09f      	b.n	8000f7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0e5      	beq.n	8000e14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	7e1b      	ldrb	r3, [r3, #24]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d108      	bne.n	8000e62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e007      	b.n	8000e72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	7e5b      	ldrb	r3, [r3, #25]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d108      	bne.n	8000e8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e007      	b.n	8000e9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7e9b      	ldrb	r3, [r3, #26]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d108      	bne.n	8000eb6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0220 	orr.w	r2, r2, #32
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	e007      	b.n	8000ec6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0220 	bic.w	r2, r2, #32
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7edb      	ldrb	r3, [r3, #27]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d108      	bne.n	8000ee0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0210 	bic.w	r2, r2, #16
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	e007      	b.n	8000ef0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0210 	orr.w	r2, r2, #16
 8000eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7f1b      	ldrb	r3, [r3, #28]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0208 	orr.w	r2, r2, #8
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0208 	bic.w	r2, r2, #8
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7f5b      	ldrb	r3, [r3, #29]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0204 	orr.w	r2, r2, #4
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0204 	bic.w	r2, r2, #4
 8000f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	ea42 0103 	orr.w	r1, r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d12e      	bne.n	8000ff4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2202      	movs	r2, #2
 8000f9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fae:	f7ff febd 	bl	8000d2c <HAL_GetTick>
 8000fb2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fb4:	e012      	b.n	8000fdc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb6:	f7ff feb9 	bl	8000d2c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b0a      	cmp	r3, #10
 8000fc2:	d90b      	bls.n	8000fdc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2205      	movs	r2, #5
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e012      	b.n	8001002 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1e5      	bne.n	8000fb6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e006      	b.n	8001002 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
  }
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800100a:	b480      	push	{r7}
 800100c:	b089      	sub	sp, #36	; 0x24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001028:	7ffb      	ldrb	r3, [r7, #31]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d003      	beq.n	8001036 <HAL_CAN_AddTxMessage+0x2c>
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	2b02      	cmp	r3, #2
 8001032:	f040 80b8 	bne.w	80011a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10a      	bne.n	8001056 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001046:	2b00      	cmp	r3, #0
 8001048:	d105      	bne.n	8001056 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a0 	beq.w	8001196 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	0e1b      	lsrs	r3, r3, #24
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d907      	bls.n	8001076 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e09e      	b.n	80011b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001076:	2201      	movs	r2, #1
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d10d      	bne.n	80010a4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001092:	68f9      	ldr	r1, [r7, #12]
 8001094:	6809      	ldr	r1, [r1, #0]
 8001096:	431a      	orrs	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3318      	adds	r3, #24
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	440b      	add	r3, r1
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e00f      	b.n	80010c4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b4:	68f9      	ldr	r1, [r7, #12]
 80010b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3318      	adds	r3, #24
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	440b      	add	r3, r1
 80010c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6819      	ldr	r1, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3318      	adds	r3, #24
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	440b      	add	r3, r1
 80010d4:	3304      	adds	r3, #4
 80010d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	7d1b      	ldrb	r3, [r3, #20]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d111      	bne.n	8001104 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3318      	adds	r3, #24
 80010e8:	011b      	lsls	r3, r3, #4
 80010ea:	4413      	add	r3, r2
 80010ec:	3304      	adds	r3, #4
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3318      	adds	r3, #24
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	440b      	add	r3, r1
 8001100:	3304      	adds	r3, #4
 8001102:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3307      	adds	r3, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	061a      	lsls	r2, r3, #24
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3306      	adds	r3, #6
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	041b      	lsls	r3, r3, #16
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3305      	adds	r3, #5
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	4313      	orrs	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	3204      	adds	r2, #4
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	4610      	mov	r0, r2
 8001128:	68fa      	ldr	r2, [r7, #12]
 800112a:	6811      	ldr	r1, [r2, #0]
 800112c:	ea43 0200 	orr.w	r2, r3, r0
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800113a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3303      	adds	r3, #3
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	061a      	lsls	r2, r3, #24
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3302      	adds	r3, #2
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3301      	adds	r3, #1
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	4313      	orrs	r3, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	4610      	mov	r0, r2
 800115e:	68fa      	ldr	r2, [r7, #12]
 8001160:	6811      	ldr	r1, [r2, #0]
 8001162:	ea43 0200 	orr.w	r2, r3, r0
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	011b      	lsls	r3, r3, #4
 800116a:	440b      	add	r3, r1
 800116c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001170:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3318      	adds	r3, #24
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	6811      	ldr	r1, [r2, #0]
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	3318      	adds	r3, #24
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	440b      	add	r3, r1
 8001190:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001192:	2300      	movs	r3, #0
 8001194:	e00e      	b.n	80011b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e006      	b.n	80011b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
  }
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3724      	adds	r7, #36	; 0x24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80011d6:	7afb      	ldrb	r3, [r7, #11]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d002      	beq.n	80011e2 <HAL_CAN_IsTxMessagePending+0x22>
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d10b      	bne.n	80011fa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	069b      	lsls	r3, r3, #26
 80011ec:	401a      	ands	r2, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	069b      	lsls	r3, r3, #26
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d001      	beq.n	80011fa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80011f6:	2301      	movs	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001224:	4013      	ands	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	4313      	orrs	r3, r2
 8001234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001236:	4a04      	ldr	r2, [pc, #16]	; (8001248 <__NVIC_SetPriorityGrouping+0x40>)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	60d3      	str	r3, [r2, #12]
}
 800123c:	bf00      	nop
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00
 800124c:	05fa0000 	.word	0x05fa0000

08001250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <__NVIC_GetPriorityGrouping+0x18>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	f003 0307 	and.w	r3, r3, #7
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	2b00      	cmp	r3, #0
 800127c:	db0b      	blt.n	8001296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	f003 021f 	and.w	r2, r3, #31
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <__NVIC_EnableIRQ+0x38>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	2001      	movs	r0, #1
 800128e:	fa00 f202 	lsl.w	r2, r0, r2
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000e100 	.word	0xe000e100

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff29 	bl	8001208 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff3e 	bl	8001250 <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff ff31 	bl	800126c <__NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff ffa2 	bl	8001364 <SysTick_Config>
 8001420:	4603      	mov	r3, r0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e175      	b.n	8001738 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8164 	bne.w	8001732 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d00b      	beq.n	800148a <HAL_GPIO_Init+0x5e>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b02      	cmp	r3, #2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	2b11      	cmp	r3, #17
 8001480:	d003      	beq.n	800148a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b12      	cmp	r3, #18
 8001488:	d130      	bne.n	80014ec <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	68da      	ldr	r2, [r3, #12]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	091b      	lsrs	r3, r3, #4
 80014d6:	f003 0201 	and.w	r2, r3, #1
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x100>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b12      	cmp	r3, #18
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80be 	beq.w	8001732 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_GPIO_Init+0x324>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	4a65      	ldr	r2, [pc, #404]	; (8001750 <HAL_GPIO_Init+0x324>)
 80015bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c0:	6453      	str	r3, [r2, #68]	; 0x44
 80015c2:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_GPIO_Init+0x324>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80015ce:	4a61      	ldr	r2, [pc, #388]	; (8001754 <HAL_GPIO_Init+0x328>)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_GPIO_Init+0x32c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d037      	beq.n	800166a <HAL_GPIO_Init+0x23e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_GPIO_Init+0x330>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d031      	beq.n	8001666 <HAL_GPIO_Init+0x23a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a56      	ldr	r2, [pc, #344]	; (8001760 <HAL_GPIO_Init+0x334>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d02b      	beq.n	8001662 <HAL_GPIO_Init+0x236>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a55      	ldr	r2, [pc, #340]	; (8001764 <HAL_GPIO_Init+0x338>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d025      	beq.n	800165e <HAL_GPIO_Init+0x232>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a54      	ldr	r2, [pc, #336]	; (8001768 <HAL_GPIO_Init+0x33c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d01f      	beq.n	800165a <HAL_GPIO_Init+0x22e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a53      	ldr	r2, [pc, #332]	; (800176c <HAL_GPIO_Init+0x340>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x22a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a52      	ldr	r2, [pc, #328]	; (8001770 <HAL_GPIO_Init+0x344>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x226>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a51      	ldr	r2, [pc, #324]	; (8001774 <HAL_GPIO_Init+0x348>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x222>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a50      	ldr	r2, [pc, #320]	; (8001778 <HAL_GPIO_Init+0x34c>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x21e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_GPIO_Init+0x350>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x21a>
 8001642:	2309      	movs	r3, #9
 8001644:	e012      	b.n	800166c <HAL_GPIO_Init+0x240>
 8001646:	230a      	movs	r3, #10
 8001648:	e010      	b.n	800166c <HAL_GPIO_Init+0x240>
 800164a:	2308      	movs	r3, #8
 800164c:	e00e      	b.n	800166c <HAL_GPIO_Init+0x240>
 800164e:	2307      	movs	r3, #7
 8001650:	e00c      	b.n	800166c <HAL_GPIO_Init+0x240>
 8001652:	2306      	movs	r3, #6
 8001654:	e00a      	b.n	800166c <HAL_GPIO_Init+0x240>
 8001656:	2305      	movs	r3, #5
 8001658:	e008      	b.n	800166c <HAL_GPIO_Init+0x240>
 800165a:	2304      	movs	r3, #4
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x240>
 800165e:	2303      	movs	r3, #3
 8001660:	e004      	b.n	800166c <HAL_GPIO_Init+0x240>
 8001662:	2302      	movs	r3, #2
 8001664:	e002      	b.n	800166c <HAL_GPIO_Init+0x240>
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x240>
 800166a:	2300      	movs	r3, #0
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f002 0203 	and.w	r2, r2, #3
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	4093      	lsls	r3, r2
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800167c:	4935      	ldr	r1, [pc, #212]	; (8001754 <HAL_GPIO_Init+0x328>)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	089b      	lsrs	r3, r3, #2
 8001682:	3302      	adds	r3, #2
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168a:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_GPIO_Init+0x354>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016ae:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_GPIO_Init+0x354>)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_GPIO_Init+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <HAL_GPIO_Init+0x354>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016de:	4b28      	ldr	r3, [pc, #160]	; (8001780 <HAL_GPIO_Init+0x354>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001702:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_GPIO_Init+0x354>)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <HAL_GPIO_Init+0x354>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <HAL_GPIO_Init+0x354>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3301      	adds	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	2b0f      	cmp	r3, #15
 800173c:	f67f ae86 	bls.w	800144c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40013800 	.word	0x40013800
 8001758:	40020000 	.word	0x40020000
 800175c:	40020400 	.word	0x40020400
 8001760:	40020800 	.word	0x40020800
 8001764:	40020c00 	.word	0x40020c00
 8001768:	40021000 	.word	0x40021000
 800176c:	40021400 	.word	0x40021400
 8001770:	40021800 	.word	0x40021800
 8001774:	40021c00 	.word	0x40021c00
 8001778:	40022000 	.word	0x40022000
 800177c:	40022400 	.word	0x40022400
 8001780:	40013c00 	.word	0x40013c00

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	619a      	str	r2, [r3, #24]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d4:	88fb      	ldrh	r3, [r7, #6]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff f888 	bl	80008ec <HAL_GPIO_EXTI_Callback>
  }
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40013c00 	.word	0x40013c00

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e29b      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8087 	beq.w	800191a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180c:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d112      	bne.n	800184a <HAL_RCC_OscConfig+0x62>
 8001824:	4b90      	ldr	r3, [pc, #576]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06c      	beq.n	8001918 <HAL_RCC_OscConfig+0x130>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d168      	bne.n	8001918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e275      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x7a>
 8001854:	4b84      	ldr	r3, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a83      	ldr	r2, [pc, #524]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e02e      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x9c>
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7b      	ldr	r2, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc0>
 800188e:	4b76      	ldr	r3, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a75      	ldr	r2, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b73      	ldr	r3, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a72      	ldr	r2, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 80018a8:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a6e      	ldr	r2, [pc, #440]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6b      	ldr	r2, [pc, #428]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fa30 	bl	8000d2c <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fa2c 	bl	8000d2c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e229      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe8>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa1c 	bl	8000d2c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fa18 	bl	8000d2c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e215      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x110>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d069      	beq.n	80019fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x190>
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x17a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1e9      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	493d      	ldr	r1, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e040      	b.n	80019fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d023      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f9ce 	bl	8000d2c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff f9ca 	bl	8000d2c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e1c7      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4929      	ldr	r1, [pc, #164]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
 80019c6:	e018      	b.n	80019fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f9aa 	bl	8000d2c <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff f9a6 	bl	8000d2c <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1a3      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d038      	beq.n	8001a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b16      	ldr	r3, [pc, #88]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a12:	4a15      	ldr	r2, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f987 	bl	8000d2c <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff f983 	bl	8000d2c <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e180      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x23a>
 8001a40:	e01a      	b.n	8001a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f96d 	bl	8000d2c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f969 	bl	8000d2c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d903      	bls.n	8001a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e166      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
 8001a68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a4 	beq.w	8001bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8c      	ldr	r3, [pc, #560]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b89      	ldr	r3, [pc, #548]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a88      	ldr	r2, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_RCC_OscConfig+0x4d4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aba:	4b80      	ldr	r3, [pc, #512]	; (8001cbc <HAL_RCC_OscConfig+0x4d4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7f      	ldr	r2, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x4d4>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff f931 	bl	8000d2c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff f92d 	bl	8000d2c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e12a      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x4d4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x31a>
 8001af4:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af8:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x33c>
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0e:	4a6a      	ldr	r2, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	4b68      	ldr	r3, [pc, #416]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1a:	4a67      	ldr	r2, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x35e>
 8001b2c:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b30:	4a61      	ldr	r2, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	4b5f      	ldr	r3, [pc, #380]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3c:	4a5e      	ldr	r2, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b46:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4a:	4a5b      	ldr	r2, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a58      	ldr	r2, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7ff f8e1 	bl	8000d2c <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff f8dd 	bl	8000d2c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0d8      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x386>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7ff f8cb 	bl	8000d2c <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff f8c7 	bl	8000d2c <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0c2      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc6:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80ae 	beq.w	8001d34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b37      	ldr	r3, [pc, #220]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d06d      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d14b      	bne.n	8001c84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001bf2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff f898 	bl	8000d2c <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c00:	f7ff f894 	bl	8000d2c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e091      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f0      	bne.n	8001c00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b19      	ldr	r3, [pc, #100]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f866 	bl	8000d2c <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c64:	f7ff f862 	bl	8000d2c <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e05f      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0x47c>
 8001c82:	e057      	b.n	8001d34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff f84c 	bl	8000d2c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7ff f848 	bl	8000d2c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e045      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4b0>
 8001cb6:	e03d      	b.n	8001d34 <HAL_RCC_OscConfig+0x54c>
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <HAL_RCC_OscConfig+0x558>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d129      	bne.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d122      	bne.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cf6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d119      	bne.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d10f      	bne.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e0d0      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b6a      	ldr	r3, [pc, #424]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 020f 	bic.w	r2, r3, #15
 8001d72:	4965      	ldr	r1, [pc, #404]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b63      	ldr	r3, [pc, #396]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0b8      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d020      	beq.n	8001dda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	4a58      	ldr	r2, [pc, #352]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0308 	and.w	r3, r3, #8
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dbc:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b50      	ldr	r3, [pc, #320]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d040      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	4b47      	ldr	r3, [pc, #284]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d115      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07f      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d107      	bne.n	8001e16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e073      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06b      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f023 0203 	bic.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4936      	ldr	r1, [pc, #216]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e38:	f7fe ff78 	bl	8000d2c <HAL_GetTick>
 8001e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3e:	e00a      	b.n	8001e56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e40:	f7fe ff74 	bl	8000d2c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e053      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 020c 	and.w	r2, r3, #12
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d1eb      	bne.n	8001e40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d210      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	4922      	ldr	r1, [pc, #136]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e032      	b.n	8001efe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4916      	ldr	r1, [pc, #88]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d009      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	490e      	ldr	r1, [pc, #56]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ed6:	f000 f821 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001eda:	4602      	mov	r2, r0
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	490a      	ldr	r1, [pc, #40]	; (8001f10 <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	5ccb      	ldrb	r3, [r1, r3]
 8001eea:	fa22 f303 	lsr.w	r3, r2, r3
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <HAL_RCC_ClockConfig+0x1d0>)
 8001ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ef2:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x1d4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fed4 	bl	8000ca4 <HAL_InitTick>

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08003b90 	.word	0x08003b90
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b5b0      	push	{r4, r5, r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f22:	2100      	movs	r1, #0
 8001f24:	6079      	str	r1, [r7, #4]
 8001f26:	2100      	movs	r1, #0
 8001f28:	60f9      	str	r1, [r7, #12]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f2e:	2100      	movs	r1, #0
 8001f30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f32:	4952      	ldr	r1, [pc, #328]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f34:	6889      	ldr	r1, [r1, #8]
 8001f36:	f001 010c 	and.w	r1, r1, #12
 8001f3a:	2908      	cmp	r1, #8
 8001f3c:	d00d      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x3e>
 8001f3e:	2908      	cmp	r1, #8
 8001f40:	f200 8094 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x150>
 8001f44:	2900      	cmp	r1, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_RCC_GetSysClockFreq+0x32>
 8001f48:	2904      	cmp	r1, #4
 8001f4a:	d003      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x38>
 8001f4c:	e08e      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4e:	4b4c      	ldr	r3, [pc, #304]	; (8002080 <HAL_RCC_GetSysClockFreq+0x164>)
 8001f50:	60bb      	str	r3, [r7, #8]
      break;
 8001f52:	e08e      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f56:	60bb      	str	r3, [r7, #8]
      break;
 8001f58:	e08b      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5a:	4948      	ldr	r1, [pc, #288]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f5c:	6849      	ldr	r1, [r1, #4]
 8001f5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001f62:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f64:	4945      	ldr	r1, [pc, #276]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f66:	6849      	ldr	r1, [r1, #4]
 8001f68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d024      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f70:	4942      	ldr	r1, [pc, #264]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8001f72:	6849      	ldr	r1, [r1, #4]
 8001f74:	0989      	lsrs	r1, r1, #6
 8001f76:	4608      	mov	r0, r1
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001f80:	f04f 0500 	mov.w	r5, #0
 8001f84:	ea00 0204 	and.w	r2, r0, r4
 8001f88:	ea01 0305 	and.w	r3, r1, r5
 8001f8c:	493d      	ldr	r1, [pc, #244]	; (8002084 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f8e:	fb01 f003 	mul.w	r0, r1, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	fb01 f102 	mul.w	r1, r1, r2
 8001f98:	1844      	adds	r4, r0, r1
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <HAL_RCC_GetSysClockFreq+0x168>)
 8001f9c:	fba2 0101 	umull	r0, r1, r2, r1
 8001fa0:	1863      	adds	r3, r4, r1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	f7fe f9a0 	bl	80002f0 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e04a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fca:	f04f 0100 	mov.w	r1, #0
 8001fce:	ea02 0400 	and.w	r4, r2, r0
 8001fd2:	ea03 0501 	and.w	r5, r3, r1
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	4629      	mov	r1, r5
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	014b      	lsls	r3, r1, #5
 8001fe4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fe8:	0142      	lsls	r2, r0, #5
 8001fea:	4610      	mov	r0, r2
 8001fec:	4619      	mov	r1, r3
 8001fee:	1b00      	subs	r0, r0, r4
 8001ff0:	eb61 0105 	sbc.w	r1, r1, r5
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	018b      	lsls	r3, r1, #6
 8001ffe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002002:	0182      	lsls	r2, r0, #6
 8002004:	1a12      	subs	r2, r2, r0
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	00d9      	lsls	r1, r3, #3
 8002014:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002018:	00d0      	lsls	r0, r2, #3
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	1912      	adds	r2, r2, r4
 8002020:	eb45 0303 	adc.w	r3, r5, r3
 8002024:	f04f 0000 	mov.w	r0, #0
 8002028:	f04f 0100 	mov.w	r1, #0
 800202c:	0299      	lsls	r1, r3, #10
 800202e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002032:	0290      	lsls	r0, r2, #10
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	461a      	mov	r2, r3
 8002040:	f04f 0300 	mov.w	r3, #0
 8002044:	f7fe f954 	bl	80002f0 <__aeabi_uldivmod>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4613      	mov	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_GetSysClockFreq+0x160>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	0c1b      	lsrs	r3, r3, #16
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	3301      	adds	r3, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	fbb2 f3f3 	udiv	r3, r2, r3
 8002068:	60bb      	str	r3, [r7, #8]
      break;
 800206a:	e002      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206c:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_RCC_GetSysClockFreq+0x164>)
 800206e:	60bb      	str	r3, [r7, #8]
      break;
 8002070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002072:	68bb      	ldr	r3, [r7, #8]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bdb0      	pop	{r4, r5, r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	017d7840 	.word	0x017d7840

08002088 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08003ba0 	.word	0x08003ba0

080020c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020cc:	f7ff ffdc 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	0b5b      	lsrs	r3, r3, #13
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	4903      	ldr	r1, [pc, #12]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80020de:	5ccb      	ldrb	r3, [r1, r3]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08003ba0 	.word	0x08003ba0

080020f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002118:	4b69      	ldr	r3, [pc, #420]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4a68      	ldr	r2, [pc, #416]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002122:	6093      	str	r3, [r2, #8]
 8002124:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212c:	4964      	ldr	r1, [pc, #400]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d017      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800214a:	4b5d      	ldr	r3, [pc, #372]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	4959      	ldr	r1, [pc, #356]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800216a:	2301      	movs	r3, #1
 800216c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002176:	2301      	movs	r3, #1
 8002178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d017      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002186:	4b4e      	ldr	r3, [pc, #312]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800218c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	494a      	ldr	r1, [pc, #296]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0320 	and.w	r3, r3, #32
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 808b 	beq.w	80022ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80021d4:	4b3a      	ldr	r3, [pc, #232]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	4a39      	ldr	r2, [pc, #228]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021de:	6413      	str	r3, [r2, #64]	; 0x40
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ec:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a34      	ldr	r2, [pc, #208]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7fe fd98 	bl	8000d2c <HAL_GetTick>
 80021fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002200:	f7fe fd94 	bl	8000d2c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e38f      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002226:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d035      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	429a      	cmp	r2, r3
 800223a:	d02e      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800223c:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002244:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800224a:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800225e:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d114      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe fd5c 	bl	8000d2c <HAL_GetTick>
 8002274:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002276:	e00a      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fd58 	bl	8000d2c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e351      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ee      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022a6:	d111      	bne.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80022b6:	400b      	ands	r3, r1
 80022b8:	4901      	ldr	r1, [pc, #4]	; (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
 80022be:	e00b      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	0ffffcff 	.word	0x0ffffcff
 80022cc:	4bb3      	ldr	r3, [pc, #716]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4ab2      	ldr	r2, [pc, #712]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022d6:	6093      	str	r3, [r2, #8]
 80022d8:	4bb0      	ldr	r3, [pc, #704]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e4:	49ad      	ldr	r1, [pc, #692]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d010      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022f6:	4ba9      	ldr	r3, [pc, #676]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	4aa7      	ldr	r2, [pc, #668]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80022fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002302:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002306:	4ba5      	ldr	r3, [pc, #660]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002308:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	49a2      	ldr	r1, [pc, #648]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	4b9d      	ldr	r3, [pc, #628]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002332:	499a      	ldr	r1, [pc, #616]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002346:	4b95      	ldr	r3, [pc, #596]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800234c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002354:	4991      	ldr	r1, [pc, #580]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002368:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002376:	4989      	ldr	r1, [pc, #548]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800238a:	4b84      	ldr	r3, [pc, #528]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4980      	ldr	r1, [pc, #512]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ac:	4b7b      	ldr	r3, [pc, #492]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	4978      	ldr	r1, [pc, #480]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ce:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f023 020c 	bic.w	r2, r3, #12
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	496f      	ldr	r1, [pc, #444]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	4967      	ldr	r1, [pc, #412]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002412:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002420:	495e      	ldr	r1, [pc, #376]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002434:	4b59      	ldr	r3, [pc, #356]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	4956      	ldr	r1, [pc, #344]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002456:	4b51      	ldr	r3, [pc, #324]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002464:	494d      	ldr	r1, [pc, #308]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002478:	4b48      	ldr	r3, [pc, #288]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800247a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	4945      	ldr	r1, [pc, #276]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a8:	493c      	ldr	r1, [pc, #240]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80024bc:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ca:	4934      	ldr	r1, [pc, #208]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d011      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ec:	492b      	ldr	r1, [pc, #172]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024fc:	d101      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024fe:	2301      	movs	r3, #1
 8002500:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800250e:	2301      	movs	r3, #1
 8002510:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251e:	4b1f      	ldr	r3, [pc, #124]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	491b      	ldr	r1, [pc, #108]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00b      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002574:	4909      	ldr	r1, [pc, #36]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00f      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002588:	4b04      	ldr	r3, [pc, #16]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800258e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	e002      	b.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	4986      	ldr	r1, [pc, #536]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80025b4:	4b81      	ldr	r3, [pc, #516]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c4:	497d      	ldr	r1, [pc, #500]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d006      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 80d6 	beq.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025e0:	4b76      	ldr	r3, [pc, #472]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a75      	ldr	r2, [pc, #468]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80025e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ec:	f7fe fb9e 	bl	8000d2c <HAL_GetTick>
 80025f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025f4:	f7fe fb9a 	bl	8000d2c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	; 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e195      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002606:	4b6d      	ldr	r3, [pc, #436]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d021      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002622:	2b00      	cmp	r3, #0
 8002624:	d11d      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002634:	4b61      	ldr	r3, [pc, #388]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263a:	0e1b      	lsrs	r3, r3, #24
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	019a      	lsls	r2, r3, #6
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	041b      	lsls	r3, r3, #16
 800264c:	431a      	orrs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	431a      	orrs	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	071b      	lsls	r3, r3, #28
 800265a:	4958      	ldr	r1, [pc, #352]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02e      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800268c:	d129      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800268e:	4b4b      	ldr	r3, [pc, #300]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002694:	0c1b      	lsrs	r3, r3, #16
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800269c:	4b47      	ldr	r3, [pc, #284]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800269e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026a2:	0f1b      	lsrs	r3, r3, #28
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	019a      	lsls	r2, r3, #6
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	041b      	lsls	r3, r3, #16
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	061b      	lsls	r3, r3, #24
 80026bc:	431a      	orrs	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	071b      	lsls	r3, r3, #28
 80026c2:	493e      	ldr	r1, [pc, #248]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026ca:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d0:	f023 021f 	bic.w	r2, r3, #31
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	3b01      	subs	r3, #1
 80026da:	4938      	ldr	r1, [pc, #224]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01d      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026ee:	4b33      	ldr	r3, [pc, #204]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f4:	0e1b      	lsrs	r3, r3, #24
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002702:	0f1b      	lsrs	r3, r3, #28
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	019a      	lsls	r2, r3, #6
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	061b      	lsls	r3, r3, #24
 800271c:	431a      	orrs	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4926      	ldr	r1, [pc, #152]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	019a      	lsls	r2, r3, #6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	071b      	lsls	r3, r3, #28
 8002752:	491a      	ldr	r1, [pc, #104]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800275a:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002760:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002764:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002766:	f7fe fae1 	bl	8000d2c <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800276e:	f7fe fadd 	bl	8000d2c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e0d8      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	f040 80ce 	bne.w	8002930 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800279a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a0:	f7fe fac4 	bl	8000d2c <HAL_GetTick>
 80027a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027a6:	e00b      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80027a8:	f7fe fac0 	bl	8000d2c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d904      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e0bb      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80027c0:	4b5e      	ldr	r3, [pc, #376]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027cc:	d0ec      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d12a      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027f6:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	0c1b      	lsrs	r3, r3, #16
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002804:	4b4d      	ldr	r3, [pc, #308]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280a:	0f1b      	lsrs	r3, r3, #28
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	019a      	lsls	r2, r3, #6
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	041b      	lsls	r3, r3, #16
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	061b      	lsls	r3, r3, #24
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	4944      	ldr	r1, [pc, #272]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002832:	4b42      	ldr	r3, [pc, #264]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	3b01      	subs	r3, #1
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	493d      	ldr	r1, [pc, #244]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800285c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002860:	d11d      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	0e1b      	lsrs	r3, r3, #24
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002870:	4b32      	ldr	r3, [pc, #200]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	0f1b      	lsrs	r3, r3, #28
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	019a      	lsls	r2, r3, #6
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	061b      	lsls	r3, r3, #24
 8002890:	431a      	orrs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	071b      	lsls	r3, r3, #28
 8002896:	4929      	ldr	r1, [pc, #164]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d028      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	0e1b      	lsrs	r3, r3, #24
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	019a      	lsls	r2, r3, #6
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	041b      	lsls	r3, r3, #16
 80028d0:	431a      	orrs	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	071b      	lsls	r3, r3, #28
 80028de:	4917      	ldr	r1, [pc, #92]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	4911      	ldr	r1, [pc, #68]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002906:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002908:	f7fe fa10 	bl	8000d2c <HAL_GetTick>
 800290c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002910:	f7fe fa0c 	bl	8000d2c <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e007      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002922:	4b06      	ldr	r3, [pc, #24]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800292a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800292e:	d1ef      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800

08002940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e040      	b.n	80029d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7fe f8aa 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2224      	movs	r2, #36	; 0x24
 800296c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8c0 	bl	8002b04 <UART_SetConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e022      	b.n	80029d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fb16 	bl	8002fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fb9d 	bl	800310c <UART_CheckIdleState>
 80029d2:	4603      	mov	r3, r0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	603b      	str	r3, [r7, #0]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	f040 8081 	bne.w	8002af8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_UART_Transmit+0x26>
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e079      	b.n	8002afa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_UART_Transmit+0x38>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e072      	b.n	8002afa <HAL_UART_Transmit+0x11e>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2221      	movs	r2, #33	; 0x21
 8002a28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a2a:	f7fe f97f 	bl	8000d2c <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	88fa      	ldrh	r2, [r7, #6]
 8002a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a48:	d108      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e003      	b.n	8002a64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002a6c:	e02c      	b.n	8002ac8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb90 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e038      	b.n	8002afa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1cc      	bne.n	8002a6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2140      	movs	r1, #64	; 0x40
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fb5d 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e005      	b.n	8002afa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2220      	movs	r2, #32
 8002af2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	e000      	b.n	8002afa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002af8:	2302      	movs	r3, #2
  }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3720      	adds	r7, #32
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4ba7      	ldr	r3, [pc, #668]	; (8002dcc <UART_SetConfig+0x2c8>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	6979      	ldr	r1, [r7, #20]
 8002b38:	430b      	orrs	r3, r1
 8002b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a95      	ldr	r2, [pc, #596]	; (8002dd0 <UART_SetConfig+0x2cc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d120      	bne.n	8002bc2 <UART_SetConfig+0xbe>
 8002b80:	4b94      	ldr	r3, [pc, #592]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d816      	bhi.n	8002bbc <UART_SetConfig+0xb8>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <UART_SetConfig+0x90>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002ba5 	.word	0x08002ba5
 8002b98:	08002bb1 	.word	0x08002bb1
 8002b9c:	08002bab 	.word	0x08002bab
 8002ba0:	08002bb7 	.word	0x08002bb7
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e14f      	b.n	8002e4a <UART_SetConfig+0x346>
 8002baa:	2302      	movs	r3, #2
 8002bac:	77fb      	strb	r3, [r7, #31]
 8002bae:	e14c      	b.n	8002e4a <UART_SetConfig+0x346>
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	77fb      	strb	r3, [r7, #31]
 8002bb4:	e149      	b.n	8002e4a <UART_SetConfig+0x346>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	77fb      	strb	r3, [r7, #31]
 8002bba:	e146      	b.n	8002e4a <UART_SetConfig+0x346>
 8002bbc:	2310      	movs	r3, #16
 8002bbe:	77fb      	strb	r3, [r7, #31]
 8002bc0:	e143      	b.n	8002e4a <UART_SetConfig+0x346>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a84      	ldr	r2, [pc, #528]	; (8002dd8 <UART_SetConfig+0x2d4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d132      	bne.n	8002c32 <UART_SetConfig+0x12e>
 8002bcc:	4b81      	ldr	r3, [pc, #516]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd2:	f003 030c 	and.w	r3, r3, #12
 8002bd6:	2b0c      	cmp	r3, #12
 8002bd8:	d828      	bhi.n	8002c2c <UART_SetConfig+0x128>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <UART_SetConfig+0xdc>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002c2d 	.word	0x08002c2d
 8002be8:	08002c2d 	.word	0x08002c2d
 8002bec:	08002c2d 	.word	0x08002c2d
 8002bf0:	08002c21 	.word	0x08002c21
 8002bf4:	08002c2d 	.word	0x08002c2d
 8002bf8:	08002c2d 	.word	0x08002c2d
 8002bfc:	08002c2d 	.word	0x08002c2d
 8002c00:	08002c1b 	.word	0x08002c1b
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c2d 	.word	0x08002c2d
 8002c0c:	08002c2d 	.word	0x08002c2d
 8002c10:	08002c27 	.word	0x08002c27
 8002c14:	2300      	movs	r3, #0
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e117      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	77fb      	strb	r3, [r7, #31]
 8002c1e:	e114      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c20:	2304      	movs	r3, #4
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e111      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c26:	2308      	movs	r3, #8
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e10e      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c2c:	2310      	movs	r3, #16
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e10b      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <UART_SetConfig+0x2d8>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d120      	bne.n	8002c7e <UART_SetConfig+0x17a>
 8002c3c:	4b65      	ldr	r3, [pc, #404]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c46:	2b30      	cmp	r3, #48	; 0x30
 8002c48:	d013      	beq.n	8002c72 <UART_SetConfig+0x16e>
 8002c4a:	2b30      	cmp	r3, #48	; 0x30
 8002c4c:	d814      	bhi.n	8002c78 <UART_SetConfig+0x174>
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d009      	beq.n	8002c66 <UART_SetConfig+0x162>
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d810      	bhi.n	8002c78 <UART_SetConfig+0x174>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <UART_SetConfig+0x15c>
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d006      	beq.n	8002c6c <UART_SetConfig+0x168>
 8002c5e:	e00b      	b.n	8002c78 <UART_SetConfig+0x174>
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e0f1      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c66:	2302      	movs	r3, #2
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e0ee      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e0eb      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c72:	2308      	movs	r3, #8
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e0e8      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e0e5      	b.n	8002e4a <UART_SetConfig+0x346>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <UART_SetConfig+0x2dc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d120      	bne.n	8002cca <UART_SetConfig+0x1c6>
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c92:	2bc0      	cmp	r3, #192	; 0xc0
 8002c94:	d013      	beq.n	8002cbe <UART_SetConfig+0x1ba>
 8002c96:	2bc0      	cmp	r3, #192	; 0xc0
 8002c98:	d814      	bhi.n	8002cc4 <UART_SetConfig+0x1c0>
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d009      	beq.n	8002cb2 <UART_SetConfig+0x1ae>
 8002c9e:	2b80      	cmp	r3, #128	; 0x80
 8002ca0:	d810      	bhi.n	8002cc4 <UART_SetConfig+0x1c0>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d002      	beq.n	8002cac <UART_SetConfig+0x1a8>
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d006      	beq.n	8002cb8 <UART_SetConfig+0x1b4>
 8002caa:	e00b      	b.n	8002cc4 <UART_SetConfig+0x1c0>
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e0cb      	b.n	8002e4a <UART_SetConfig+0x346>
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	77fb      	strb	r3, [r7, #31]
 8002cb6:	e0c8      	b.n	8002e4a <UART_SetConfig+0x346>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	77fb      	strb	r3, [r7, #31]
 8002cbc:	e0c5      	b.n	8002e4a <UART_SetConfig+0x346>
 8002cbe:	2308      	movs	r3, #8
 8002cc0:	77fb      	strb	r3, [r7, #31]
 8002cc2:	e0c2      	b.n	8002e4a <UART_SetConfig+0x346>
 8002cc4:	2310      	movs	r3, #16
 8002cc6:	77fb      	strb	r3, [r7, #31]
 8002cc8:	e0bf      	b.n	8002e4a <UART_SetConfig+0x346>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a45      	ldr	r2, [pc, #276]	; (8002de4 <UART_SetConfig+0x2e0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d125      	bne.n	8002d20 <UART_SetConfig+0x21c>
 8002cd4:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce2:	d017      	beq.n	8002d14 <UART_SetConfig+0x210>
 8002ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce8:	d817      	bhi.n	8002d1a <UART_SetConfig+0x216>
 8002cea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cee:	d00b      	beq.n	8002d08 <UART_SetConfig+0x204>
 8002cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cf4:	d811      	bhi.n	8002d1a <UART_SetConfig+0x216>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <UART_SetConfig+0x1fe>
 8002cfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfe:	d006      	beq.n	8002d0e <UART_SetConfig+0x20a>
 8002d00:	e00b      	b.n	8002d1a <UART_SetConfig+0x216>
 8002d02:	2300      	movs	r3, #0
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e0a0      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e09d      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d0e:	2304      	movs	r3, #4
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e09a      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d14:	2308      	movs	r3, #8
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	e097      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	77fb      	strb	r3, [r7, #31]
 8002d1e:	e094      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <UART_SetConfig+0x2e4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d125      	bne.n	8002d76 <UART_SetConfig+0x272>
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d38:	d017      	beq.n	8002d6a <UART_SetConfig+0x266>
 8002d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d3e:	d817      	bhi.n	8002d70 <UART_SetConfig+0x26c>
 8002d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d44:	d00b      	beq.n	8002d5e <UART_SetConfig+0x25a>
 8002d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4a:	d811      	bhi.n	8002d70 <UART_SetConfig+0x26c>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <UART_SetConfig+0x254>
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d006      	beq.n	8002d64 <UART_SetConfig+0x260>
 8002d56:	e00b      	b.n	8002d70 <UART_SetConfig+0x26c>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e075      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	77fb      	strb	r3, [r7, #31]
 8002d62:	e072      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d64:	2304      	movs	r3, #4
 8002d66:	77fb      	strb	r3, [r7, #31]
 8002d68:	e06f      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d6a:	2308      	movs	r3, #8
 8002d6c:	77fb      	strb	r3, [r7, #31]
 8002d6e:	e06c      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d70:	2310      	movs	r3, #16
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e069      	b.n	8002e4a <UART_SetConfig+0x346>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	; (8002dec <UART_SetConfig+0x2e8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d137      	bne.n	8002df0 <UART_SetConfig+0x2ec>
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <UART_SetConfig+0x2d0>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d8e:	d017      	beq.n	8002dc0 <UART_SetConfig+0x2bc>
 8002d90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d94:	d817      	bhi.n	8002dc6 <UART_SetConfig+0x2c2>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d00b      	beq.n	8002db4 <UART_SetConfig+0x2b0>
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da0:	d811      	bhi.n	8002dc6 <UART_SetConfig+0x2c2>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <UART_SetConfig+0x2aa>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002daa:	d006      	beq.n	8002dba <UART_SetConfig+0x2b6>
 8002dac:	e00b      	b.n	8002dc6 <UART_SetConfig+0x2c2>
 8002dae:	2300      	movs	r3, #0
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e04a      	b.n	8002e4a <UART_SetConfig+0x346>
 8002db4:	2302      	movs	r3, #2
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e047      	b.n	8002e4a <UART_SetConfig+0x346>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	77fb      	strb	r3, [r7, #31]
 8002dbe:	e044      	b.n	8002e4a <UART_SetConfig+0x346>
 8002dc0:	2308      	movs	r3, #8
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e041      	b.n	8002e4a <UART_SetConfig+0x346>
 8002dc6:	2310      	movs	r3, #16
 8002dc8:	77fb      	strb	r3, [r7, #31]
 8002dca:	e03e      	b.n	8002e4a <UART_SetConfig+0x346>
 8002dcc:	efff69f3 	.word	0xefff69f3
 8002dd0:	40011000 	.word	0x40011000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40004400 	.word	0x40004400
 8002ddc:	40004800 	.word	0x40004800
 8002de0:	40004c00 	.word	0x40004c00
 8002de4:	40005000 	.word	0x40005000
 8002de8:	40011400 	.word	0x40011400
 8002dec:	40007800 	.word	0x40007800
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a71      	ldr	r2, [pc, #452]	; (8002fbc <UART_SetConfig+0x4b8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d125      	bne.n	8002e46 <UART_SetConfig+0x342>
 8002dfa:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <UART_SetConfig+0x4bc>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e08:	d017      	beq.n	8002e3a <UART_SetConfig+0x336>
 8002e0a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002e0e:	d817      	bhi.n	8002e40 <UART_SetConfig+0x33c>
 8002e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e14:	d00b      	beq.n	8002e2e <UART_SetConfig+0x32a>
 8002e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e1a:	d811      	bhi.n	8002e40 <UART_SetConfig+0x33c>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <UART_SetConfig+0x324>
 8002e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e24:	d006      	beq.n	8002e34 <UART_SetConfig+0x330>
 8002e26:	e00b      	b.n	8002e40 <UART_SetConfig+0x33c>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	77fb      	strb	r3, [r7, #31]
 8002e2c:	e00d      	b.n	8002e4a <UART_SetConfig+0x346>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	77fb      	strb	r3, [r7, #31]
 8002e32:	e00a      	b.n	8002e4a <UART_SetConfig+0x346>
 8002e34:	2304      	movs	r3, #4
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e007      	b.n	8002e4a <UART_SetConfig+0x346>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e004      	b.n	8002e4a <UART_SetConfig+0x346>
 8002e40:	2310      	movs	r3, #16
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e001      	b.n	8002e4a <UART_SetConfig+0x346>
 8002e46:	2310      	movs	r3, #16
 8002e48:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e52:	d15b      	bne.n	8002f0c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002e54:	7ffb      	ldrb	r3, [r7, #31]
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d827      	bhi.n	8002eaa <UART_SetConfig+0x3a6>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0x35c>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e85 	.word	0x08002e85
 8002e64:	08002e8d 	.word	0x08002e8d
 8002e68:	08002e95 	.word	0x08002e95
 8002e6c:	08002eab 	.word	0x08002eab
 8002e70:	08002e9b 	.word	0x08002e9b
 8002e74:	08002eab 	.word	0x08002eab
 8002e78:	08002eab 	.word	0x08002eab
 8002e7c:	08002eab 	.word	0x08002eab
 8002e80:	08002ea3 	.word	0x08002ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7ff f90c 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002e88:	61b8      	str	r0, [r7, #24]
        break;
 8002e8a:	e013      	b.n	8002eb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e8c:	f7ff f91c 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 8002e90:	61b8      	str	r0, [r7, #24]
        break;
 8002e92:	e00f      	b.n	8002eb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e94:	4b4b      	ldr	r3, [pc, #300]	; (8002fc4 <UART_SetConfig+0x4c0>)
 8002e96:	61bb      	str	r3, [r7, #24]
        break;
 8002e98:	e00c      	b.n	8002eb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e9a:	f7ff f83f 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8002e9e:	61b8      	str	r0, [r7, #24]
        break;
 8002ea0:	e008      	b.n	8002eb4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea6:	61bb      	str	r3, [r7, #24]
        break;
 8002ea8:	e004      	b.n	8002eb4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77bb      	strb	r3, [r7, #30]
        break;
 8002eb2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d074      	beq.n	8002fa4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b0f      	cmp	r3, #15
 8002ed6:	d916      	bls.n	8002f06 <UART_SetConfig+0x402>
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d212      	bcs.n	8002f06 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	f023 030f 	bic.w	r3, r3, #15
 8002ee8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	085b      	lsrs	r3, r3, #1
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	89fa      	ldrh	r2, [r7, #14]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	e04e      	b.n	8002fa4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	77bb      	strb	r3, [r7, #30]
 8002f0a:	e04b      	b.n	8002fa4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f0c:	7ffb      	ldrb	r3, [r7, #31]
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d827      	bhi.n	8002f62 <UART_SetConfig+0x45e>
 8002f12:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <UART_SetConfig+0x414>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f3d 	.word	0x08002f3d
 8002f1c:	08002f45 	.word	0x08002f45
 8002f20:	08002f4d 	.word	0x08002f4d
 8002f24:	08002f63 	.word	0x08002f63
 8002f28:	08002f53 	.word	0x08002f53
 8002f2c:	08002f63 	.word	0x08002f63
 8002f30:	08002f63 	.word	0x08002f63
 8002f34:	08002f63 	.word	0x08002f63
 8002f38:	08002f5b 	.word	0x08002f5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f3c:	f7ff f8b0 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002f40:	61b8      	str	r0, [r7, #24]
        break;
 8002f42:	e013      	b.n	8002f6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f44:	f7ff f8c0 	bl	80020c8 <HAL_RCC_GetPCLK2Freq>
 8002f48:	61b8      	str	r0, [r7, #24]
        break;
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <UART_SetConfig+0x4c0>)
 8002f4e:	61bb      	str	r3, [r7, #24]
        break;
 8002f50:	e00c      	b.n	8002f6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f52:	f7fe ffe3 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8002f56:	61b8      	str	r0, [r7, #24]
        break;
 8002f58:	e008      	b.n	8002f6c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f5e:	61bb      	str	r3, [r7, #24]
        break;
 8002f60:	e004      	b.n	8002f6c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	77bb      	strb	r3, [r7, #30]
        break;
 8002f6a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	085a      	lsrs	r2, r3, #1
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	441a      	add	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d908      	bls.n	8002fa0 <UART_SetConfig+0x49c>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f94:	d204      	bcs.n	8002fa0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	e001      	b.n	8002fa4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002fb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3720      	adds	r7, #32
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40007c00 	.word	0x40007c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	00f42400 	.word	0x00f42400

08002fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0308 	and.w	r3, r3, #8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01a      	beq.n	80030de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c6:	d10a      	bne.n	80030de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	605a      	str	r2, [r3, #4]
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af02      	add	r7, sp, #8
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800311c:	f7fd fe06 	bl	8000d2c <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b08      	cmp	r3, #8
 800312e:	d10e      	bne.n	800314e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003130:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f82d 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e023      	b.n	8003196 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d10e      	bne.n	800317a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800315c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f817 	bl	800319e <UART_WaitOnFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e00d      	b.n	8003196 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ae:	e05e      	b.n	800326e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d05a      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fd fdb8 	bl	8000d2c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <UART_WaitOnFlagUntilTimeout+0x30>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11b      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e043      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02c      	beq.n	800326e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003222:	d124      	bne.n	800326e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800322c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800323c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0201 	bic.w	r2, r2, #1
 800324c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e00f      	b.n	800328e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	bf0c      	ite	eq
 800327e:	2301      	moveq	r3, #1
 8003280:	2300      	movne	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	461a      	mov	r2, r3
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	429a      	cmp	r2, r3
 800328a:	d091      	beq.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <__errno>:
 8003298:	4b01      	ldr	r3, [pc, #4]	; (80032a0 <__errno+0x8>)
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	2000000c 	.word	0x2000000c

080032a4 <__libc_init_array>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4d0d      	ldr	r5, [pc, #52]	; (80032dc <__libc_init_array+0x38>)
 80032a8:	4c0d      	ldr	r4, [pc, #52]	; (80032e0 <__libc_init_array+0x3c>)
 80032aa:	1b64      	subs	r4, r4, r5
 80032ac:	10a4      	asrs	r4, r4, #2
 80032ae:	2600      	movs	r6, #0
 80032b0:	42a6      	cmp	r6, r4
 80032b2:	d109      	bne.n	80032c8 <__libc_init_array+0x24>
 80032b4:	4d0b      	ldr	r5, [pc, #44]	; (80032e4 <__libc_init_array+0x40>)
 80032b6:	4c0c      	ldr	r4, [pc, #48]	; (80032e8 <__libc_init_array+0x44>)
 80032b8:	f000 fc4e 	bl	8003b58 <_init>
 80032bc:	1b64      	subs	r4, r4, r5
 80032be:	10a4      	asrs	r4, r4, #2
 80032c0:	2600      	movs	r6, #0
 80032c2:	42a6      	cmp	r6, r4
 80032c4:	d105      	bne.n	80032d2 <__libc_init_array+0x2e>
 80032c6:	bd70      	pop	{r4, r5, r6, pc}
 80032c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032cc:	4798      	blx	r3
 80032ce:	3601      	adds	r6, #1
 80032d0:	e7ee      	b.n	80032b0 <__libc_init_array+0xc>
 80032d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80032d6:	4798      	blx	r3
 80032d8:	3601      	adds	r6, #1
 80032da:	e7f2      	b.n	80032c2 <__libc_init_array+0x1e>
 80032dc:	08003be4 	.word	0x08003be4
 80032e0:	08003be4 	.word	0x08003be4
 80032e4:	08003be4 	.word	0x08003be4
 80032e8:	08003be8 	.word	0x08003be8

080032ec <memset>:
 80032ec:	4402      	add	r2, r0
 80032ee:	4603      	mov	r3, r0
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d100      	bne.n	80032f6 <memset+0xa>
 80032f4:	4770      	bx	lr
 80032f6:	f803 1b01 	strb.w	r1, [r3], #1
 80032fa:	e7f9      	b.n	80032f0 <memset+0x4>

080032fc <siprintf>:
 80032fc:	b40e      	push	{r1, r2, r3}
 80032fe:	b500      	push	{lr}
 8003300:	b09c      	sub	sp, #112	; 0x70
 8003302:	ab1d      	add	r3, sp, #116	; 0x74
 8003304:	9002      	str	r0, [sp, #8]
 8003306:	9006      	str	r0, [sp, #24]
 8003308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800330c:	4809      	ldr	r0, [pc, #36]	; (8003334 <siprintf+0x38>)
 800330e:	9107      	str	r1, [sp, #28]
 8003310:	9104      	str	r1, [sp, #16]
 8003312:	4909      	ldr	r1, [pc, #36]	; (8003338 <siprintf+0x3c>)
 8003314:	f853 2b04 	ldr.w	r2, [r3], #4
 8003318:	9105      	str	r1, [sp, #20]
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	a902      	add	r1, sp, #8
 8003320:	f000 f868 	bl	80033f4 <_svfiprintf_r>
 8003324:	9b02      	ldr	r3, [sp, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	b01c      	add	sp, #112	; 0x70
 800332c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003330:	b003      	add	sp, #12
 8003332:	4770      	bx	lr
 8003334:	2000000c 	.word	0x2000000c
 8003338:	ffff0208 	.word	0xffff0208

0800333c <__ssputs_r>:
 800333c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003340:	688e      	ldr	r6, [r1, #8]
 8003342:	429e      	cmp	r6, r3
 8003344:	4682      	mov	sl, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4690      	mov	r8, r2
 800334a:	461f      	mov	r7, r3
 800334c:	d838      	bhi.n	80033c0 <__ssputs_r+0x84>
 800334e:	898a      	ldrh	r2, [r1, #12]
 8003350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003354:	d032      	beq.n	80033bc <__ssputs_r+0x80>
 8003356:	6825      	ldr	r5, [r4, #0]
 8003358:	6909      	ldr	r1, [r1, #16]
 800335a:	eba5 0901 	sub.w	r9, r5, r1
 800335e:	6965      	ldr	r5, [r4, #20]
 8003360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003368:	3301      	adds	r3, #1
 800336a:	444b      	add	r3, r9
 800336c:	106d      	asrs	r5, r5, #1
 800336e:	429d      	cmp	r5, r3
 8003370:	bf38      	it	cc
 8003372:	461d      	movcc	r5, r3
 8003374:	0553      	lsls	r3, r2, #21
 8003376:	d531      	bpl.n	80033dc <__ssputs_r+0xa0>
 8003378:	4629      	mov	r1, r5
 800337a:	f000 fb47 	bl	8003a0c <_malloc_r>
 800337e:	4606      	mov	r6, r0
 8003380:	b950      	cbnz	r0, 8003398 <__ssputs_r+0x5c>
 8003382:	230c      	movs	r3, #12
 8003384:	f8ca 3000 	str.w	r3, [sl]
 8003388:	89a3      	ldrh	r3, [r4, #12]
 800338a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003398:	6921      	ldr	r1, [r4, #16]
 800339a:	464a      	mov	r2, r9
 800339c:	f000 fabe 	bl	800391c <memcpy>
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80033a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033aa:	81a3      	strh	r3, [r4, #12]
 80033ac:	6126      	str	r6, [r4, #16]
 80033ae:	6165      	str	r5, [r4, #20]
 80033b0:	444e      	add	r6, r9
 80033b2:	eba5 0509 	sub.w	r5, r5, r9
 80033b6:	6026      	str	r6, [r4, #0]
 80033b8:	60a5      	str	r5, [r4, #8]
 80033ba:	463e      	mov	r6, r7
 80033bc:	42be      	cmp	r6, r7
 80033be:	d900      	bls.n	80033c2 <__ssputs_r+0x86>
 80033c0:	463e      	mov	r6, r7
 80033c2:	4632      	mov	r2, r6
 80033c4:	6820      	ldr	r0, [r4, #0]
 80033c6:	4641      	mov	r1, r8
 80033c8:	f000 fab6 	bl	8003938 <memmove>
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	6822      	ldr	r2, [r4, #0]
 80033d0:	1b9b      	subs	r3, r3, r6
 80033d2:	4432      	add	r2, r6
 80033d4:	60a3      	str	r3, [r4, #8]
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	2000      	movs	r0, #0
 80033da:	e7db      	b.n	8003394 <__ssputs_r+0x58>
 80033dc:	462a      	mov	r2, r5
 80033de:	f000 fb6f 	bl	8003ac0 <_realloc_r>
 80033e2:	4606      	mov	r6, r0
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d1e1      	bne.n	80033ac <__ssputs_r+0x70>
 80033e8:	6921      	ldr	r1, [r4, #16]
 80033ea:	4650      	mov	r0, sl
 80033ec:	f000 fabe 	bl	800396c <_free_r>
 80033f0:	e7c7      	b.n	8003382 <__ssputs_r+0x46>
	...

080033f4 <_svfiprintf_r>:
 80033f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f8:	4698      	mov	r8, r3
 80033fa:	898b      	ldrh	r3, [r1, #12]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	b09d      	sub	sp, #116	; 0x74
 8003400:	4607      	mov	r7, r0
 8003402:	460d      	mov	r5, r1
 8003404:	4614      	mov	r4, r2
 8003406:	d50e      	bpl.n	8003426 <_svfiprintf_r+0x32>
 8003408:	690b      	ldr	r3, [r1, #16]
 800340a:	b963      	cbnz	r3, 8003426 <_svfiprintf_r+0x32>
 800340c:	2140      	movs	r1, #64	; 0x40
 800340e:	f000 fafd 	bl	8003a0c <_malloc_r>
 8003412:	6028      	str	r0, [r5, #0]
 8003414:	6128      	str	r0, [r5, #16]
 8003416:	b920      	cbnz	r0, 8003422 <_svfiprintf_r+0x2e>
 8003418:	230c      	movs	r3, #12
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	e0d1      	b.n	80035c6 <_svfiprintf_r+0x1d2>
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	616b      	str	r3, [r5, #20]
 8003426:	2300      	movs	r3, #0
 8003428:	9309      	str	r3, [sp, #36]	; 0x24
 800342a:	2320      	movs	r3, #32
 800342c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003430:	f8cd 800c 	str.w	r8, [sp, #12]
 8003434:	2330      	movs	r3, #48	; 0x30
 8003436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80035e0 <_svfiprintf_r+0x1ec>
 800343a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800343e:	f04f 0901 	mov.w	r9, #1
 8003442:	4623      	mov	r3, r4
 8003444:	469a      	mov	sl, r3
 8003446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800344a:	b10a      	cbz	r2, 8003450 <_svfiprintf_r+0x5c>
 800344c:	2a25      	cmp	r2, #37	; 0x25
 800344e:	d1f9      	bne.n	8003444 <_svfiprintf_r+0x50>
 8003450:	ebba 0b04 	subs.w	fp, sl, r4
 8003454:	d00b      	beq.n	800346e <_svfiprintf_r+0x7a>
 8003456:	465b      	mov	r3, fp
 8003458:	4622      	mov	r2, r4
 800345a:	4629      	mov	r1, r5
 800345c:	4638      	mov	r0, r7
 800345e:	f7ff ff6d 	bl	800333c <__ssputs_r>
 8003462:	3001      	adds	r0, #1
 8003464:	f000 80aa 	beq.w	80035bc <_svfiprintf_r+0x1c8>
 8003468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800346a:	445a      	add	r2, fp
 800346c:	9209      	str	r2, [sp, #36]	; 0x24
 800346e:	f89a 3000 	ldrb.w	r3, [sl]
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80a2 	beq.w	80035bc <_svfiprintf_r+0x1c8>
 8003478:	2300      	movs	r3, #0
 800347a:	f04f 32ff 	mov.w	r2, #4294967295
 800347e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003482:	f10a 0a01 	add.w	sl, sl, #1
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	9307      	str	r3, [sp, #28]
 800348a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800348e:	931a      	str	r3, [sp, #104]	; 0x68
 8003490:	4654      	mov	r4, sl
 8003492:	2205      	movs	r2, #5
 8003494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003498:	4851      	ldr	r0, [pc, #324]	; (80035e0 <_svfiprintf_r+0x1ec>)
 800349a:	f7fc fed9 	bl	8000250 <memchr>
 800349e:	9a04      	ldr	r2, [sp, #16]
 80034a0:	b9d8      	cbnz	r0, 80034da <_svfiprintf_r+0xe6>
 80034a2:	06d0      	lsls	r0, r2, #27
 80034a4:	bf44      	itt	mi
 80034a6:	2320      	movmi	r3, #32
 80034a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034ac:	0711      	lsls	r1, r2, #28
 80034ae:	bf44      	itt	mi
 80034b0:	232b      	movmi	r3, #43	; 0x2b
 80034b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034b6:	f89a 3000 	ldrb.w	r3, [sl]
 80034ba:	2b2a      	cmp	r3, #42	; 0x2a
 80034bc:	d015      	beq.n	80034ea <_svfiprintf_r+0xf6>
 80034be:	9a07      	ldr	r2, [sp, #28]
 80034c0:	4654      	mov	r4, sl
 80034c2:	2000      	movs	r0, #0
 80034c4:	f04f 0c0a 	mov.w	ip, #10
 80034c8:	4621      	mov	r1, r4
 80034ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034ce:	3b30      	subs	r3, #48	; 0x30
 80034d0:	2b09      	cmp	r3, #9
 80034d2:	d94e      	bls.n	8003572 <_svfiprintf_r+0x17e>
 80034d4:	b1b0      	cbz	r0, 8003504 <_svfiprintf_r+0x110>
 80034d6:	9207      	str	r2, [sp, #28]
 80034d8:	e014      	b.n	8003504 <_svfiprintf_r+0x110>
 80034da:	eba0 0308 	sub.w	r3, r0, r8
 80034de:	fa09 f303 	lsl.w	r3, r9, r3
 80034e2:	4313      	orrs	r3, r2
 80034e4:	9304      	str	r3, [sp, #16]
 80034e6:	46a2      	mov	sl, r4
 80034e8:	e7d2      	b.n	8003490 <_svfiprintf_r+0x9c>
 80034ea:	9b03      	ldr	r3, [sp, #12]
 80034ec:	1d19      	adds	r1, r3, #4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	9103      	str	r1, [sp, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	bfbb      	ittet	lt
 80034f6:	425b      	neglt	r3, r3
 80034f8:	f042 0202 	orrlt.w	r2, r2, #2
 80034fc:	9307      	strge	r3, [sp, #28]
 80034fe:	9307      	strlt	r3, [sp, #28]
 8003500:	bfb8      	it	lt
 8003502:	9204      	strlt	r2, [sp, #16]
 8003504:	7823      	ldrb	r3, [r4, #0]
 8003506:	2b2e      	cmp	r3, #46	; 0x2e
 8003508:	d10c      	bne.n	8003524 <_svfiprintf_r+0x130>
 800350a:	7863      	ldrb	r3, [r4, #1]
 800350c:	2b2a      	cmp	r3, #42	; 0x2a
 800350e:	d135      	bne.n	800357c <_svfiprintf_r+0x188>
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	1d1a      	adds	r2, r3, #4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	9203      	str	r2, [sp, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	bfb8      	it	lt
 800351c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003520:	3402      	adds	r4, #2
 8003522:	9305      	str	r3, [sp, #20]
 8003524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80035f0 <_svfiprintf_r+0x1fc>
 8003528:	7821      	ldrb	r1, [r4, #0]
 800352a:	2203      	movs	r2, #3
 800352c:	4650      	mov	r0, sl
 800352e:	f7fc fe8f 	bl	8000250 <memchr>
 8003532:	b140      	cbz	r0, 8003546 <_svfiprintf_r+0x152>
 8003534:	2340      	movs	r3, #64	; 0x40
 8003536:	eba0 000a 	sub.w	r0, r0, sl
 800353a:	fa03 f000 	lsl.w	r0, r3, r0
 800353e:	9b04      	ldr	r3, [sp, #16]
 8003540:	4303      	orrs	r3, r0
 8003542:	3401      	adds	r4, #1
 8003544:	9304      	str	r3, [sp, #16]
 8003546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800354a:	4826      	ldr	r0, [pc, #152]	; (80035e4 <_svfiprintf_r+0x1f0>)
 800354c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003550:	2206      	movs	r2, #6
 8003552:	f7fc fe7d 	bl	8000250 <memchr>
 8003556:	2800      	cmp	r0, #0
 8003558:	d038      	beq.n	80035cc <_svfiprintf_r+0x1d8>
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <_svfiprintf_r+0x1f4>)
 800355c:	bb1b      	cbnz	r3, 80035a6 <_svfiprintf_r+0x1b2>
 800355e:	9b03      	ldr	r3, [sp, #12]
 8003560:	3307      	adds	r3, #7
 8003562:	f023 0307 	bic.w	r3, r3, #7
 8003566:	3308      	adds	r3, #8
 8003568:	9303      	str	r3, [sp, #12]
 800356a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800356c:	4433      	add	r3, r6
 800356e:	9309      	str	r3, [sp, #36]	; 0x24
 8003570:	e767      	b.n	8003442 <_svfiprintf_r+0x4e>
 8003572:	fb0c 3202 	mla	r2, ip, r2, r3
 8003576:	460c      	mov	r4, r1
 8003578:	2001      	movs	r0, #1
 800357a:	e7a5      	b.n	80034c8 <_svfiprintf_r+0xd4>
 800357c:	2300      	movs	r3, #0
 800357e:	3401      	adds	r4, #1
 8003580:	9305      	str	r3, [sp, #20]
 8003582:	4619      	mov	r1, r3
 8003584:	f04f 0c0a 	mov.w	ip, #10
 8003588:	4620      	mov	r0, r4
 800358a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800358e:	3a30      	subs	r2, #48	; 0x30
 8003590:	2a09      	cmp	r2, #9
 8003592:	d903      	bls.n	800359c <_svfiprintf_r+0x1a8>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0c5      	beq.n	8003524 <_svfiprintf_r+0x130>
 8003598:	9105      	str	r1, [sp, #20]
 800359a:	e7c3      	b.n	8003524 <_svfiprintf_r+0x130>
 800359c:	fb0c 2101 	mla	r1, ip, r1, r2
 80035a0:	4604      	mov	r4, r0
 80035a2:	2301      	movs	r3, #1
 80035a4:	e7f0      	b.n	8003588 <_svfiprintf_r+0x194>
 80035a6:	ab03      	add	r3, sp, #12
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	462a      	mov	r2, r5
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <_svfiprintf_r+0x1f8>)
 80035ae:	a904      	add	r1, sp, #16
 80035b0:	4638      	mov	r0, r7
 80035b2:	f3af 8000 	nop.w
 80035b6:	1c42      	adds	r2, r0, #1
 80035b8:	4606      	mov	r6, r0
 80035ba:	d1d6      	bne.n	800356a <_svfiprintf_r+0x176>
 80035bc:	89ab      	ldrh	r3, [r5, #12]
 80035be:	065b      	lsls	r3, r3, #25
 80035c0:	f53f af2c 	bmi.w	800341c <_svfiprintf_r+0x28>
 80035c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035c6:	b01d      	add	sp, #116	; 0x74
 80035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035cc:	ab03      	add	r3, sp, #12
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	462a      	mov	r2, r5
 80035d2:	4b06      	ldr	r3, [pc, #24]	; (80035ec <_svfiprintf_r+0x1f8>)
 80035d4:	a904      	add	r1, sp, #16
 80035d6:	4638      	mov	r0, r7
 80035d8:	f000 f87a 	bl	80036d0 <_printf_i>
 80035dc:	e7eb      	b.n	80035b6 <_svfiprintf_r+0x1c2>
 80035de:	bf00      	nop
 80035e0:	08003ba8 	.word	0x08003ba8
 80035e4:	08003bb2 	.word	0x08003bb2
 80035e8:	00000000 	.word	0x00000000
 80035ec:	0800333d 	.word	0x0800333d
 80035f0:	08003bae 	.word	0x08003bae

080035f4 <_printf_common>:
 80035f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f8:	4616      	mov	r6, r2
 80035fa:	4699      	mov	r9, r3
 80035fc:	688a      	ldr	r2, [r1, #8]
 80035fe:	690b      	ldr	r3, [r1, #16]
 8003600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003604:	4293      	cmp	r3, r2
 8003606:	bfb8      	it	lt
 8003608:	4613      	movlt	r3, r2
 800360a:	6033      	str	r3, [r6, #0]
 800360c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003610:	4607      	mov	r7, r0
 8003612:	460c      	mov	r4, r1
 8003614:	b10a      	cbz	r2, 800361a <_printf_common+0x26>
 8003616:	3301      	adds	r3, #1
 8003618:	6033      	str	r3, [r6, #0]
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	0699      	lsls	r1, r3, #26
 800361e:	bf42      	ittt	mi
 8003620:	6833      	ldrmi	r3, [r6, #0]
 8003622:	3302      	addmi	r3, #2
 8003624:	6033      	strmi	r3, [r6, #0]
 8003626:	6825      	ldr	r5, [r4, #0]
 8003628:	f015 0506 	ands.w	r5, r5, #6
 800362c:	d106      	bne.n	800363c <_printf_common+0x48>
 800362e:	f104 0a19 	add.w	sl, r4, #25
 8003632:	68e3      	ldr	r3, [r4, #12]
 8003634:	6832      	ldr	r2, [r6, #0]
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	42ab      	cmp	r3, r5
 800363a:	dc26      	bgt.n	800368a <_printf_common+0x96>
 800363c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003640:	1e13      	subs	r3, r2, #0
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	bf18      	it	ne
 8003646:	2301      	movne	r3, #1
 8003648:	0692      	lsls	r2, r2, #26
 800364a:	d42b      	bmi.n	80036a4 <_printf_common+0xb0>
 800364c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003650:	4649      	mov	r1, r9
 8003652:	4638      	mov	r0, r7
 8003654:	47c0      	blx	r8
 8003656:	3001      	adds	r0, #1
 8003658:	d01e      	beq.n	8003698 <_printf_common+0xa4>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	68e5      	ldr	r5, [r4, #12]
 800365e:	6832      	ldr	r2, [r6, #0]
 8003660:	f003 0306 	and.w	r3, r3, #6
 8003664:	2b04      	cmp	r3, #4
 8003666:	bf08      	it	eq
 8003668:	1aad      	subeq	r5, r5, r2
 800366a:	68a3      	ldr	r3, [r4, #8]
 800366c:	6922      	ldr	r2, [r4, #16]
 800366e:	bf0c      	ite	eq
 8003670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003674:	2500      	movne	r5, #0
 8003676:	4293      	cmp	r3, r2
 8003678:	bfc4      	itt	gt
 800367a:	1a9b      	subgt	r3, r3, r2
 800367c:	18ed      	addgt	r5, r5, r3
 800367e:	2600      	movs	r6, #0
 8003680:	341a      	adds	r4, #26
 8003682:	42b5      	cmp	r5, r6
 8003684:	d11a      	bne.n	80036bc <_printf_common+0xc8>
 8003686:	2000      	movs	r0, #0
 8003688:	e008      	b.n	800369c <_printf_common+0xa8>
 800368a:	2301      	movs	r3, #1
 800368c:	4652      	mov	r2, sl
 800368e:	4649      	mov	r1, r9
 8003690:	4638      	mov	r0, r7
 8003692:	47c0      	blx	r8
 8003694:	3001      	adds	r0, #1
 8003696:	d103      	bne.n	80036a0 <_printf_common+0xac>
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036a0:	3501      	adds	r5, #1
 80036a2:	e7c6      	b.n	8003632 <_printf_common+0x3e>
 80036a4:	18e1      	adds	r1, r4, r3
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	2030      	movs	r0, #48	; 0x30
 80036aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ae:	4422      	add	r2, r4
 80036b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b8:	3302      	adds	r3, #2
 80036ba:	e7c7      	b.n	800364c <_printf_common+0x58>
 80036bc:	2301      	movs	r3, #1
 80036be:	4622      	mov	r2, r4
 80036c0:	4649      	mov	r1, r9
 80036c2:	4638      	mov	r0, r7
 80036c4:	47c0      	blx	r8
 80036c6:	3001      	adds	r0, #1
 80036c8:	d0e6      	beq.n	8003698 <_printf_common+0xa4>
 80036ca:	3601      	adds	r6, #1
 80036cc:	e7d9      	b.n	8003682 <_printf_common+0x8e>
	...

080036d0 <_printf_i>:
 80036d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	460c      	mov	r4, r1
 80036d6:	4691      	mov	r9, r2
 80036d8:	7e27      	ldrb	r7, [r4, #24]
 80036da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80036dc:	2f78      	cmp	r7, #120	; 0x78
 80036de:	4680      	mov	r8, r0
 80036e0:	469a      	mov	sl, r3
 80036e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036e6:	d807      	bhi.n	80036f8 <_printf_i+0x28>
 80036e8:	2f62      	cmp	r7, #98	; 0x62
 80036ea:	d80a      	bhi.n	8003702 <_printf_i+0x32>
 80036ec:	2f00      	cmp	r7, #0
 80036ee:	f000 80d8 	beq.w	80038a2 <_printf_i+0x1d2>
 80036f2:	2f58      	cmp	r7, #88	; 0x58
 80036f4:	f000 80a3 	beq.w	800383e <_printf_i+0x16e>
 80036f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80036fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003700:	e03a      	b.n	8003778 <_printf_i+0xa8>
 8003702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003706:	2b15      	cmp	r3, #21
 8003708:	d8f6      	bhi.n	80036f8 <_printf_i+0x28>
 800370a:	a001      	add	r0, pc, #4	; (adr r0, 8003710 <_printf_i+0x40>)
 800370c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003710:	08003769 	.word	0x08003769
 8003714:	0800377d 	.word	0x0800377d
 8003718:	080036f9 	.word	0x080036f9
 800371c:	080036f9 	.word	0x080036f9
 8003720:	080036f9 	.word	0x080036f9
 8003724:	080036f9 	.word	0x080036f9
 8003728:	0800377d 	.word	0x0800377d
 800372c:	080036f9 	.word	0x080036f9
 8003730:	080036f9 	.word	0x080036f9
 8003734:	080036f9 	.word	0x080036f9
 8003738:	080036f9 	.word	0x080036f9
 800373c:	08003889 	.word	0x08003889
 8003740:	080037ad 	.word	0x080037ad
 8003744:	0800386b 	.word	0x0800386b
 8003748:	080036f9 	.word	0x080036f9
 800374c:	080036f9 	.word	0x080036f9
 8003750:	080038ab 	.word	0x080038ab
 8003754:	080036f9 	.word	0x080036f9
 8003758:	080037ad 	.word	0x080037ad
 800375c:	080036f9 	.word	0x080036f9
 8003760:	080036f9 	.word	0x080036f9
 8003764:	08003873 	.word	0x08003873
 8003768:	680b      	ldr	r3, [r1, #0]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	600a      	str	r2, [r1, #0]
 8003770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003778:	2301      	movs	r3, #1
 800377a:	e0a3      	b.n	80038c4 <_printf_i+0x1f4>
 800377c:	6825      	ldr	r5, [r4, #0]
 800377e:	6808      	ldr	r0, [r1, #0]
 8003780:	062e      	lsls	r6, r5, #24
 8003782:	f100 0304 	add.w	r3, r0, #4
 8003786:	d50a      	bpl.n	800379e <_printf_i+0xce>
 8003788:	6805      	ldr	r5, [r0, #0]
 800378a:	600b      	str	r3, [r1, #0]
 800378c:	2d00      	cmp	r5, #0
 800378e:	da03      	bge.n	8003798 <_printf_i+0xc8>
 8003790:	232d      	movs	r3, #45	; 0x2d
 8003792:	426d      	negs	r5, r5
 8003794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003798:	485e      	ldr	r0, [pc, #376]	; (8003914 <_printf_i+0x244>)
 800379a:	230a      	movs	r3, #10
 800379c:	e019      	b.n	80037d2 <_printf_i+0x102>
 800379e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80037a2:	6805      	ldr	r5, [r0, #0]
 80037a4:	600b      	str	r3, [r1, #0]
 80037a6:	bf18      	it	ne
 80037a8:	b22d      	sxthne	r5, r5
 80037aa:	e7ef      	b.n	800378c <_printf_i+0xbc>
 80037ac:	680b      	ldr	r3, [r1, #0]
 80037ae:	6825      	ldr	r5, [r4, #0]
 80037b0:	1d18      	adds	r0, r3, #4
 80037b2:	6008      	str	r0, [r1, #0]
 80037b4:	0628      	lsls	r0, r5, #24
 80037b6:	d501      	bpl.n	80037bc <_printf_i+0xec>
 80037b8:	681d      	ldr	r5, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <_printf_i+0xf2>
 80037bc:	0669      	lsls	r1, r5, #25
 80037be:	d5fb      	bpl.n	80037b8 <_printf_i+0xe8>
 80037c0:	881d      	ldrh	r5, [r3, #0]
 80037c2:	4854      	ldr	r0, [pc, #336]	; (8003914 <_printf_i+0x244>)
 80037c4:	2f6f      	cmp	r7, #111	; 0x6f
 80037c6:	bf0c      	ite	eq
 80037c8:	2308      	moveq	r3, #8
 80037ca:	230a      	movne	r3, #10
 80037cc:	2100      	movs	r1, #0
 80037ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037d2:	6866      	ldr	r6, [r4, #4]
 80037d4:	60a6      	str	r6, [r4, #8]
 80037d6:	2e00      	cmp	r6, #0
 80037d8:	bfa2      	ittt	ge
 80037da:	6821      	ldrge	r1, [r4, #0]
 80037dc:	f021 0104 	bicge.w	r1, r1, #4
 80037e0:	6021      	strge	r1, [r4, #0]
 80037e2:	b90d      	cbnz	r5, 80037e8 <_printf_i+0x118>
 80037e4:	2e00      	cmp	r6, #0
 80037e6:	d04d      	beq.n	8003884 <_printf_i+0x1b4>
 80037e8:	4616      	mov	r6, r2
 80037ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80037ee:	fb03 5711 	mls	r7, r3, r1, r5
 80037f2:	5dc7      	ldrb	r7, [r0, r7]
 80037f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037f8:	462f      	mov	r7, r5
 80037fa:	42bb      	cmp	r3, r7
 80037fc:	460d      	mov	r5, r1
 80037fe:	d9f4      	bls.n	80037ea <_printf_i+0x11a>
 8003800:	2b08      	cmp	r3, #8
 8003802:	d10b      	bne.n	800381c <_printf_i+0x14c>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	07df      	lsls	r7, r3, #31
 8003808:	d508      	bpl.n	800381c <_printf_i+0x14c>
 800380a:	6923      	ldr	r3, [r4, #16]
 800380c:	6861      	ldr	r1, [r4, #4]
 800380e:	4299      	cmp	r1, r3
 8003810:	bfde      	ittt	le
 8003812:	2330      	movle	r3, #48	; 0x30
 8003814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800381c:	1b92      	subs	r2, r2, r6
 800381e:	6122      	str	r2, [r4, #16]
 8003820:	f8cd a000 	str.w	sl, [sp]
 8003824:	464b      	mov	r3, r9
 8003826:	aa03      	add	r2, sp, #12
 8003828:	4621      	mov	r1, r4
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fee2 	bl	80035f4 <_printf_common>
 8003830:	3001      	adds	r0, #1
 8003832:	d14c      	bne.n	80038ce <_printf_i+0x1fe>
 8003834:	f04f 30ff 	mov.w	r0, #4294967295
 8003838:	b004      	add	sp, #16
 800383a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800383e:	4835      	ldr	r0, [pc, #212]	; (8003914 <_printf_i+0x244>)
 8003840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	680e      	ldr	r6, [r1, #0]
 8003848:	061f      	lsls	r7, r3, #24
 800384a:	f856 5b04 	ldr.w	r5, [r6], #4
 800384e:	600e      	str	r6, [r1, #0]
 8003850:	d514      	bpl.n	800387c <_printf_i+0x1ac>
 8003852:	07d9      	lsls	r1, r3, #31
 8003854:	bf44      	itt	mi
 8003856:	f043 0320 	orrmi.w	r3, r3, #32
 800385a:	6023      	strmi	r3, [r4, #0]
 800385c:	b91d      	cbnz	r5, 8003866 <_printf_i+0x196>
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f023 0320 	bic.w	r3, r3, #32
 8003864:	6023      	str	r3, [r4, #0]
 8003866:	2310      	movs	r3, #16
 8003868:	e7b0      	b.n	80037cc <_printf_i+0xfc>
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	f043 0320 	orr.w	r3, r3, #32
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	2378      	movs	r3, #120	; 0x78
 8003874:	4828      	ldr	r0, [pc, #160]	; (8003918 <_printf_i+0x248>)
 8003876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800387a:	e7e3      	b.n	8003844 <_printf_i+0x174>
 800387c:	065e      	lsls	r6, r3, #25
 800387e:	bf48      	it	mi
 8003880:	b2ad      	uxthmi	r5, r5
 8003882:	e7e6      	b.n	8003852 <_printf_i+0x182>
 8003884:	4616      	mov	r6, r2
 8003886:	e7bb      	b.n	8003800 <_printf_i+0x130>
 8003888:	680b      	ldr	r3, [r1, #0]
 800388a:	6826      	ldr	r6, [r4, #0]
 800388c:	6960      	ldr	r0, [r4, #20]
 800388e:	1d1d      	adds	r5, r3, #4
 8003890:	600d      	str	r5, [r1, #0]
 8003892:	0635      	lsls	r5, r6, #24
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	d501      	bpl.n	800389c <_printf_i+0x1cc>
 8003898:	6018      	str	r0, [r3, #0]
 800389a:	e002      	b.n	80038a2 <_printf_i+0x1d2>
 800389c:	0671      	lsls	r1, r6, #25
 800389e:	d5fb      	bpl.n	8003898 <_printf_i+0x1c8>
 80038a0:	8018      	strh	r0, [r3, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	4616      	mov	r6, r2
 80038a8:	e7ba      	b.n	8003820 <_printf_i+0x150>
 80038aa:	680b      	ldr	r3, [r1, #0]
 80038ac:	1d1a      	adds	r2, r3, #4
 80038ae:	600a      	str	r2, [r1, #0]
 80038b0:	681e      	ldr	r6, [r3, #0]
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	2100      	movs	r1, #0
 80038b6:	4630      	mov	r0, r6
 80038b8:	f7fc fcca 	bl	8000250 <memchr>
 80038bc:	b108      	cbz	r0, 80038c2 <_printf_i+0x1f2>
 80038be:	1b80      	subs	r0, r0, r6
 80038c0:	6060      	str	r0, [r4, #4]
 80038c2:	6863      	ldr	r3, [r4, #4]
 80038c4:	6123      	str	r3, [r4, #16]
 80038c6:	2300      	movs	r3, #0
 80038c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038cc:	e7a8      	b.n	8003820 <_printf_i+0x150>
 80038ce:	6923      	ldr	r3, [r4, #16]
 80038d0:	4632      	mov	r2, r6
 80038d2:	4649      	mov	r1, r9
 80038d4:	4640      	mov	r0, r8
 80038d6:	47d0      	blx	sl
 80038d8:	3001      	adds	r0, #1
 80038da:	d0ab      	beq.n	8003834 <_printf_i+0x164>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	079b      	lsls	r3, r3, #30
 80038e0:	d413      	bmi.n	800390a <_printf_i+0x23a>
 80038e2:	68e0      	ldr	r0, [r4, #12]
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	4298      	cmp	r0, r3
 80038e8:	bfb8      	it	lt
 80038ea:	4618      	movlt	r0, r3
 80038ec:	e7a4      	b.n	8003838 <_printf_i+0x168>
 80038ee:	2301      	movs	r3, #1
 80038f0:	4632      	mov	r2, r6
 80038f2:	4649      	mov	r1, r9
 80038f4:	4640      	mov	r0, r8
 80038f6:	47d0      	blx	sl
 80038f8:	3001      	adds	r0, #1
 80038fa:	d09b      	beq.n	8003834 <_printf_i+0x164>
 80038fc:	3501      	adds	r5, #1
 80038fe:	68e3      	ldr	r3, [r4, #12]
 8003900:	9903      	ldr	r1, [sp, #12]
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	42ab      	cmp	r3, r5
 8003906:	dcf2      	bgt.n	80038ee <_printf_i+0x21e>
 8003908:	e7eb      	b.n	80038e2 <_printf_i+0x212>
 800390a:	2500      	movs	r5, #0
 800390c:	f104 0619 	add.w	r6, r4, #25
 8003910:	e7f5      	b.n	80038fe <_printf_i+0x22e>
 8003912:	bf00      	nop
 8003914:	08003bb9 	.word	0x08003bb9
 8003918:	08003bca 	.word	0x08003bca

0800391c <memcpy>:
 800391c:	440a      	add	r2, r1
 800391e:	4291      	cmp	r1, r2
 8003920:	f100 33ff 	add.w	r3, r0, #4294967295
 8003924:	d100      	bne.n	8003928 <memcpy+0xc>
 8003926:	4770      	bx	lr
 8003928:	b510      	push	{r4, lr}
 800392a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800392e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003932:	4291      	cmp	r1, r2
 8003934:	d1f9      	bne.n	800392a <memcpy+0xe>
 8003936:	bd10      	pop	{r4, pc}

08003938 <memmove>:
 8003938:	4288      	cmp	r0, r1
 800393a:	b510      	push	{r4, lr}
 800393c:	eb01 0402 	add.w	r4, r1, r2
 8003940:	d902      	bls.n	8003948 <memmove+0x10>
 8003942:	4284      	cmp	r4, r0
 8003944:	4623      	mov	r3, r4
 8003946:	d807      	bhi.n	8003958 <memmove+0x20>
 8003948:	1e43      	subs	r3, r0, #1
 800394a:	42a1      	cmp	r1, r4
 800394c:	d008      	beq.n	8003960 <memmove+0x28>
 800394e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003956:	e7f8      	b.n	800394a <memmove+0x12>
 8003958:	4402      	add	r2, r0
 800395a:	4601      	mov	r1, r0
 800395c:	428a      	cmp	r2, r1
 800395e:	d100      	bne.n	8003962 <memmove+0x2a>
 8003960:	bd10      	pop	{r4, pc}
 8003962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800396a:	e7f7      	b.n	800395c <memmove+0x24>

0800396c <_free_r>:
 800396c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800396e:	2900      	cmp	r1, #0
 8003970:	d048      	beq.n	8003a04 <_free_r+0x98>
 8003972:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003976:	9001      	str	r0, [sp, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f1a1 0404 	sub.w	r4, r1, #4
 800397e:	bfb8      	it	lt
 8003980:	18e4      	addlt	r4, r4, r3
 8003982:	f000 f8d3 	bl	8003b2c <__malloc_lock>
 8003986:	4a20      	ldr	r2, [pc, #128]	; (8003a08 <_free_r+0x9c>)
 8003988:	9801      	ldr	r0, [sp, #4]
 800398a:	6813      	ldr	r3, [r2, #0]
 800398c:	4615      	mov	r5, r2
 800398e:	b933      	cbnz	r3, 800399e <_free_r+0x32>
 8003990:	6063      	str	r3, [r4, #4]
 8003992:	6014      	str	r4, [r2, #0]
 8003994:	b003      	add	sp, #12
 8003996:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800399a:	f000 b8cd 	b.w	8003b38 <__malloc_unlock>
 800399e:	42a3      	cmp	r3, r4
 80039a0:	d90b      	bls.n	80039ba <_free_r+0x4e>
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	1862      	adds	r2, r4, r1
 80039a6:	4293      	cmp	r3, r2
 80039a8:	bf04      	itt	eq
 80039aa:	681a      	ldreq	r2, [r3, #0]
 80039ac:	685b      	ldreq	r3, [r3, #4]
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	bf04      	itt	eq
 80039b2:	1852      	addeq	r2, r2, r1
 80039b4:	6022      	streq	r2, [r4, #0]
 80039b6:	602c      	str	r4, [r5, #0]
 80039b8:	e7ec      	b.n	8003994 <_free_r+0x28>
 80039ba:	461a      	mov	r2, r3
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	b10b      	cbz	r3, 80039c4 <_free_r+0x58>
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	d9fa      	bls.n	80039ba <_free_r+0x4e>
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	1855      	adds	r5, r2, r1
 80039c8:	42a5      	cmp	r5, r4
 80039ca:	d10b      	bne.n	80039e4 <_free_r+0x78>
 80039cc:	6824      	ldr	r4, [r4, #0]
 80039ce:	4421      	add	r1, r4
 80039d0:	1854      	adds	r4, r2, r1
 80039d2:	42a3      	cmp	r3, r4
 80039d4:	6011      	str	r1, [r2, #0]
 80039d6:	d1dd      	bne.n	8003994 <_free_r+0x28>
 80039d8:	681c      	ldr	r4, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	6053      	str	r3, [r2, #4]
 80039de:	4421      	add	r1, r4
 80039e0:	6011      	str	r1, [r2, #0]
 80039e2:	e7d7      	b.n	8003994 <_free_r+0x28>
 80039e4:	d902      	bls.n	80039ec <_free_r+0x80>
 80039e6:	230c      	movs	r3, #12
 80039e8:	6003      	str	r3, [r0, #0]
 80039ea:	e7d3      	b.n	8003994 <_free_r+0x28>
 80039ec:	6825      	ldr	r5, [r4, #0]
 80039ee:	1961      	adds	r1, r4, r5
 80039f0:	428b      	cmp	r3, r1
 80039f2:	bf04      	itt	eq
 80039f4:	6819      	ldreq	r1, [r3, #0]
 80039f6:	685b      	ldreq	r3, [r3, #4]
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	bf04      	itt	eq
 80039fc:	1949      	addeq	r1, r1, r5
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	6054      	str	r4, [r2, #4]
 8003a02:	e7c7      	b.n	8003994 <_free_r+0x28>
 8003a04:	b003      	add	sp, #12
 8003a06:	bd30      	pop	{r4, r5, pc}
 8003a08:	20000094 	.word	0x20000094

08003a0c <_malloc_r>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	1ccd      	adds	r5, r1, #3
 8003a10:	f025 0503 	bic.w	r5, r5, #3
 8003a14:	3508      	adds	r5, #8
 8003a16:	2d0c      	cmp	r5, #12
 8003a18:	bf38      	it	cc
 8003a1a:	250c      	movcc	r5, #12
 8003a1c:	2d00      	cmp	r5, #0
 8003a1e:	4606      	mov	r6, r0
 8003a20:	db01      	blt.n	8003a26 <_malloc_r+0x1a>
 8003a22:	42a9      	cmp	r1, r5
 8003a24:	d903      	bls.n	8003a2e <_malloc_r+0x22>
 8003a26:	230c      	movs	r3, #12
 8003a28:	6033      	str	r3, [r6, #0]
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a2e:	f000 f87d 	bl	8003b2c <__malloc_lock>
 8003a32:	4921      	ldr	r1, [pc, #132]	; (8003ab8 <_malloc_r+0xac>)
 8003a34:	680a      	ldr	r2, [r1, #0]
 8003a36:	4614      	mov	r4, r2
 8003a38:	b99c      	cbnz	r4, 8003a62 <_malloc_r+0x56>
 8003a3a:	4f20      	ldr	r7, [pc, #128]	; (8003abc <_malloc_r+0xb0>)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	b923      	cbnz	r3, 8003a4a <_malloc_r+0x3e>
 8003a40:	4621      	mov	r1, r4
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 f862 	bl	8003b0c <_sbrk_r>
 8003a48:	6038      	str	r0, [r7, #0]
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f85d 	bl	8003b0c <_sbrk_r>
 8003a52:	1c43      	adds	r3, r0, #1
 8003a54:	d123      	bne.n	8003a9e <_malloc_r+0x92>
 8003a56:	230c      	movs	r3, #12
 8003a58:	6033      	str	r3, [r6, #0]
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f000 f86c 	bl	8003b38 <__malloc_unlock>
 8003a60:	e7e3      	b.n	8003a2a <_malloc_r+0x1e>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	1b5b      	subs	r3, r3, r5
 8003a66:	d417      	bmi.n	8003a98 <_malloc_r+0x8c>
 8003a68:	2b0b      	cmp	r3, #11
 8003a6a:	d903      	bls.n	8003a74 <_malloc_r+0x68>
 8003a6c:	6023      	str	r3, [r4, #0]
 8003a6e:	441c      	add	r4, r3
 8003a70:	6025      	str	r5, [r4, #0]
 8003a72:	e004      	b.n	8003a7e <_malloc_r+0x72>
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	42a2      	cmp	r2, r4
 8003a78:	bf0c      	ite	eq
 8003a7a:	600b      	streq	r3, [r1, #0]
 8003a7c:	6053      	strne	r3, [r2, #4]
 8003a7e:	4630      	mov	r0, r6
 8003a80:	f000 f85a 	bl	8003b38 <__malloc_unlock>
 8003a84:	f104 000b 	add.w	r0, r4, #11
 8003a88:	1d23      	adds	r3, r4, #4
 8003a8a:	f020 0007 	bic.w	r0, r0, #7
 8003a8e:	1ac2      	subs	r2, r0, r3
 8003a90:	d0cc      	beq.n	8003a2c <_malloc_r+0x20>
 8003a92:	1a1b      	subs	r3, r3, r0
 8003a94:	50a3      	str	r3, [r4, r2]
 8003a96:	e7c9      	b.n	8003a2c <_malloc_r+0x20>
 8003a98:	4622      	mov	r2, r4
 8003a9a:	6864      	ldr	r4, [r4, #4]
 8003a9c:	e7cc      	b.n	8003a38 <_malloc_r+0x2c>
 8003a9e:	1cc4      	adds	r4, r0, #3
 8003aa0:	f024 0403 	bic.w	r4, r4, #3
 8003aa4:	42a0      	cmp	r0, r4
 8003aa6:	d0e3      	beq.n	8003a70 <_malloc_r+0x64>
 8003aa8:	1a21      	subs	r1, r4, r0
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f000 f82e 	bl	8003b0c <_sbrk_r>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d1dd      	bne.n	8003a70 <_malloc_r+0x64>
 8003ab4:	e7cf      	b.n	8003a56 <_malloc_r+0x4a>
 8003ab6:	bf00      	nop
 8003ab8:	20000094 	.word	0x20000094
 8003abc:	20000098 	.word	0x20000098

08003ac0 <_realloc_r>:
 8003ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ac2:	4607      	mov	r7, r0
 8003ac4:	4614      	mov	r4, r2
 8003ac6:	460e      	mov	r6, r1
 8003ac8:	b921      	cbnz	r1, 8003ad4 <_realloc_r+0x14>
 8003aca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003ace:	4611      	mov	r1, r2
 8003ad0:	f7ff bf9c 	b.w	8003a0c <_malloc_r>
 8003ad4:	b922      	cbnz	r2, 8003ae0 <_realloc_r+0x20>
 8003ad6:	f7ff ff49 	bl	800396c <_free_r>
 8003ada:	4625      	mov	r5, r4
 8003adc:	4628      	mov	r0, r5
 8003ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae0:	f000 f830 	bl	8003b44 <_malloc_usable_size_r>
 8003ae4:	42a0      	cmp	r0, r4
 8003ae6:	d20f      	bcs.n	8003b08 <_realloc_r+0x48>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4638      	mov	r0, r7
 8003aec:	f7ff ff8e 	bl	8003a0c <_malloc_r>
 8003af0:	4605      	mov	r5, r0
 8003af2:	2800      	cmp	r0, #0
 8003af4:	d0f2      	beq.n	8003adc <_realloc_r+0x1c>
 8003af6:	4631      	mov	r1, r6
 8003af8:	4622      	mov	r2, r4
 8003afa:	f7ff ff0f 	bl	800391c <memcpy>
 8003afe:	4631      	mov	r1, r6
 8003b00:	4638      	mov	r0, r7
 8003b02:	f7ff ff33 	bl	800396c <_free_r>
 8003b06:	e7e9      	b.n	8003adc <_realloc_r+0x1c>
 8003b08:	4635      	mov	r5, r6
 8003b0a:	e7e7      	b.n	8003adc <_realloc_r+0x1c>

08003b0c <_sbrk_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d06      	ldr	r5, [pc, #24]	; (8003b28 <_sbrk_r+0x1c>)
 8003b10:	2300      	movs	r3, #0
 8003b12:	4604      	mov	r4, r0
 8003b14:	4608      	mov	r0, r1
 8003b16:	602b      	str	r3, [r5, #0]
 8003b18:	f7fd f846 	bl	8000ba8 <_sbrk>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d102      	bne.n	8003b26 <_sbrk_r+0x1a>
 8003b20:	682b      	ldr	r3, [r5, #0]
 8003b22:	b103      	cbz	r3, 8003b26 <_sbrk_r+0x1a>
 8003b24:	6023      	str	r3, [r4, #0]
 8003b26:	bd38      	pop	{r3, r4, r5, pc}
 8003b28:	2000014c 	.word	0x2000014c

08003b2c <__malloc_lock>:
 8003b2c:	4801      	ldr	r0, [pc, #4]	; (8003b34 <__malloc_lock+0x8>)
 8003b2e:	f000 b811 	b.w	8003b54 <__retarget_lock_acquire_recursive>
 8003b32:	bf00      	nop
 8003b34:	20000154 	.word	0x20000154

08003b38 <__malloc_unlock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_unlock+0x8>)
 8003b3a:	f000 b80c 	b.w	8003b56 <__retarget_lock_release_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000154 	.word	0x20000154

08003b44 <_malloc_usable_size_r>:
 8003b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b48:	1f18      	subs	r0, r3, #4
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	bfbc      	itt	lt
 8003b4e:	580b      	ldrlt	r3, [r1, r0]
 8003b50:	18c0      	addlt	r0, r0, r3
 8003b52:	4770      	bx	lr

08003b54 <__retarget_lock_acquire_recursive>:
 8003b54:	4770      	bx	lr

08003b56 <__retarget_lock_release_recursive>:
 8003b56:	4770      	bx	lr

08003b58 <_init>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr

08003b64 <_fini>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr
